# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Admin {
  _count: AdminCount
  id: Int!
  role: String!
  students(cursor: StudentWhereUniqueInput, distinct: [StudentScalarFieldEnum!], orderBy: [StudentOrderByWithRelationInput!], skip: Int, take: Int, where: StudentWhereInput): [Student!]!
  teachers(cursor: TeacherWhereUniqueInput, distinct: [TeacherScalarFieldEnum!], orderBy: [TeacherOrderByWithRelationInput!], skip: Int, take: Int, where: TeacherWhereInput): [Teacher!]!
  user: User!
  userId: Int!
}

type AdminAvgAggregate {
  id: Float
  userId: Float
}

input AdminAvgOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

type AdminCount {
  students: Int!
  teachers: Int!
}

type AdminCountAggregate {
  _all: Int!
  id: Int!
  role: Int!
  userId: Int!
}

input AdminCountOrderByAggregateInput {
  id: SortOrder
  role: SortOrder
  userId: SortOrder
}

input AdminCreateInput {
  role: String!
  students: StudentCreateNestedManyWithoutAdminInput
  teachers: TeacherCreateNestedManyWithoutAdminInput
  user: UserCreateNestedOneWithoutAdminsInput!
}

input AdminCreateNestedOneWithoutStudentsInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutStudentsInput
  create: AdminCreateWithoutStudentsInput
}

input AdminCreateNestedOneWithoutTeachersInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutTeachersInput
  create: AdminCreateWithoutTeachersInput
}

input AdminCreateNestedOneWithoutUserInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutUserInput
  create: AdminCreateWithoutUserInput
}

input AdminCreateOrConnectWithoutStudentsInput {
  create: AdminCreateWithoutStudentsInput!
  where: AdminWhereUniqueInput!
}

input AdminCreateOrConnectWithoutTeachersInput {
  create: AdminCreateWithoutTeachersInput!
  where: AdminWhereUniqueInput!
}

input AdminCreateOrConnectWithoutUserInput {
  create: AdminCreateWithoutUserInput!
  where: AdminWhereUniqueInput!
}

input AdminCreateWithoutStudentsInput {
  role: String!
  teachers: TeacherCreateNestedManyWithoutAdminInput
  user: UserCreateNestedOneWithoutAdminsInput!
}

input AdminCreateWithoutTeachersInput {
  role: String!
  students: StudentCreateNestedManyWithoutAdminInput
  user: UserCreateNestedOneWithoutAdminsInput!
}

input AdminCreateWithoutUserInput {
  role: String!
  students: StudentCreateNestedManyWithoutAdminInput
  teachers: TeacherCreateNestedManyWithoutAdminInput
}

type AdminGroupBy {
  _avg: AdminAvgAggregate
  _count: AdminCountAggregate
  _max: AdminMaxAggregate
  _min: AdminMinAggregate
  _sum: AdminSumAggregate
  id: Int!
  role: String!
  userId: Int!
}

type AdminMaxAggregate {
  id: Int
  role: String
  userId: Int
}

input AdminMaxOrderByAggregateInput {
  id: SortOrder
  role: SortOrder
  userId: SortOrder
}

type AdminMinAggregate {
  id: Int
  role: String
  userId: Int
}

input AdminMinOrderByAggregateInput {
  id: SortOrder
  role: SortOrder
  userId: SortOrder
}

input AdminOrderByWithAggregationInput {
  _avg: AdminAvgOrderByAggregateInput
  _count: AdminCountOrderByAggregateInput
  _max: AdminMaxOrderByAggregateInput
  _min: AdminMinOrderByAggregateInput
  _sum: AdminSumOrderByAggregateInput
  id: SortOrder
  role: SortOrder
  userId: SortOrder
}

input AdminOrderByWithRelationInput {
  id: SortOrder
  role: SortOrder
  students: StudentOrderByRelationAggregateInput
  teachers: TeacherOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AdminRelationFilter {
  is: AdminWhereInput
  isNot: AdminWhereInput
}

enum AdminScalarFieldEnum {
  id
  role
  userId
}

input AdminScalarWhereWithAggregatesInput {
  AND: [AdminScalarWhereWithAggregatesInput!]
  NOT: [AdminScalarWhereWithAggregatesInput!]
  OR: [AdminScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  role: StringWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type AdminSumAggregate {
  id: Int
  userId: Int
}

input AdminSumOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

input AdminUpdateInput {
  role: StringFieldUpdateOperationsInput
  students: StudentUpdateManyWithoutAdminInput
  teachers: TeacherUpdateManyWithoutAdminInput
  user: UserUpdateOneRequiredWithoutAdminsInput
}

input AdminUpdateManyMutationInput {
  role: StringFieldUpdateOperationsInput
}

input AdminUpdateOneWithoutStudentsInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutStudentsInput
  create: AdminCreateWithoutStudentsInput
  delete: Boolean
  disconnect: Boolean
  update: AdminUpdateWithoutStudentsInput
  upsert: AdminUpsertWithoutStudentsInput
}

input AdminUpdateOneWithoutTeachersInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutTeachersInput
  create: AdminCreateWithoutTeachersInput
  delete: Boolean
  disconnect: Boolean
  update: AdminUpdateWithoutTeachersInput
  upsert: AdminUpsertWithoutTeachersInput
}

input AdminUpdateOneWithoutUserInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutUserInput
  create: AdminCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: AdminUpdateWithoutUserInput
  upsert: AdminUpsertWithoutUserInput
}

input AdminUpdateWithoutStudentsInput {
  role: StringFieldUpdateOperationsInput
  teachers: TeacherUpdateManyWithoutAdminInput
  user: UserUpdateOneRequiredWithoutAdminsInput
}

input AdminUpdateWithoutTeachersInput {
  role: StringFieldUpdateOperationsInput
  students: StudentUpdateManyWithoutAdminInput
  user: UserUpdateOneRequiredWithoutAdminsInput
}

input AdminUpdateWithoutUserInput {
  role: StringFieldUpdateOperationsInput
  students: StudentUpdateManyWithoutAdminInput
  teachers: TeacherUpdateManyWithoutAdminInput
}

input AdminUpsertWithoutStudentsInput {
  create: AdminCreateWithoutStudentsInput!
  update: AdminUpdateWithoutStudentsInput!
}

input AdminUpsertWithoutTeachersInput {
  create: AdminCreateWithoutTeachersInput!
  update: AdminUpdateWithoutTeachersInput!
}

input AdminUpsertWithoutUserInput {
  create: AdminCreateWithoutUserInput!
  update: AdminUpdateWithoutUserInput!
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  id: IntFilter
  role: StringFilter
  students: StudentListRelationFilter
  teachers: TeacherListRelationFilter
  user: UserRelationFilter
  userId: IntFilter
}

input AdminWhereUniqueInput {
  id: Int
  userId: Int
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAdmin {
  _avg: AdminAvgAggregate
  _count: AdminCountAggregate
  _max: AdminMaxAggregate
  _min: AdminMinAggregate
  _sum: AdminSumAggregate
}

type AggregateAssignment {
  _avg: AssignmentAvgAggregate
  _count: AssignmentCountAggregate
  _max: AssignmentMaxAggregate
  _min: AssignmentMinAggregate
  _sum: AssignmentSumAggregate
}

type AggregateClassroom {
  _avg: ClassroomAvgAggregate
  _count: ClassroomCountAggregate
  _max: ClassroomMaxAggregate
  _min: ClassroomMinAggregate
  _sum: ClassroomSumAggregate
}

type AggregateCourse {
  _avg: CourseAvgAggregate
  _count: CourseCountAggregate
  _max: CourseMaxAggregate
  _min: CourseMinAggregate
  _sum: CourseSumAggregate
}

type AggregateDepartment {
  _avg: DepartmentAvgAggregate
  _count: DepartmentCountAggregate
  _max: DepartmentMaxAggregate
  _min: DepartmentMinAggregate
  _sum: DepartmentSumAggregate
}

type AggregateLesson {
  _avg: LessonAvgAggregate
  _count: LessonCountAggregate
  _max: LessonMaxAggregate
  _min: LessonMinAggregate
  _sum: LessonSumAggregate
}

type AggregateMeeting {
  _avg: MeetingAvgAggregate
  _count: MeetingCountAggregate
  _max: MeetingMaxAggregate
  _min: MeetingMinAggregate
  _sum: MeetingSumAggregate
}

type AggregateProgress {
  _avg: ProgressAvgAggregate
  _count: ProgressCountAggregate
  _max: ProgressMaxAggregate
  _min: ProgressMinAggregate
  _sum: ProgressSumAggregate
}

type AggregateStudent {
  _avg: StudentAvgAggregate
  _count: StudentCountAggregate
  _max: StudentMaxAggregate
  _min: StudentMinAggregate
  _sum: StudentSumAggregate
}

type AggregateSubmission {
  _avg: SubmissionAvgAggregate
  _count: SubmissionCountAggregate
  _max: SubmissionMaxAggregate
  _min: SubmissionMinAggregate
  _sum: SubmissionSumAggregate
}

type AggregateTeacher {
  _avg: TeacherAvgAggregate
  _count: TeacherCountAggregate
  _max: TeacherMaxAggregate
  _min: TeacherMinAggregate
  _sum: TeacherSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type Assignment {
  _count: AssignmentCount
  content: String!
  course: Course
  courseId: Int
  createdAt: DateTime!
  deadline: DateTime!
  id: Int!
  label: String!
  submissions(cursor: SubmissionWhereUniqueInput, distinct: [SubmissionScalarFieldEnum!], orderBy: [SubmissionOrderByWithRelationInput!], skip: Int, take: Int, where: SubmissionWhereInput): [Submission!]!
  updatedAt: DateTime!
}

type AssignmentAvgAggregate {
  courseId: Float
  id: Float
}

input AssignmentAvgOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
}

type AssignmentCount {
  submissions: Int!
}

type AssignmentCountAggregate {
  _all: Int!
  content: Int!
  courseId: Int!
  createdAt: Int!
  deadline: Int!
  id: Int!
  label: Int!
  updatedAt: Int!
}

input AssignmentCountOrderByAggregateInput {
  content: SortOrder
  courseId: SortOrder
  createdAt: SortOrder
  deadline: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input AssignmentCreateInput {
  content: String!
  course: CourseCreateNestedOneWithoutAssignmentsInput
  createdAt: DateTime
  deadline: DateTime!
  label: String!
  submissions: SubmissionCreateNestedManyWithoutAssignmentInput
  updatedAt: DateTime
}

input AssignmentCreateNestedManyWithoutCourseInput {
  connect: [AssignmentWhereUniqueInput!]
  connectOrCreate: [AssignmentCreateOrConnectWithoutCourseInput!]
  create: [AssignmentCreateWithoutCourseInput!]
}

input AssignmentCreateNestedOneWithoutSubmissionsInput {
  connect: AssignmentWhereUniqueInput
  connectOrCreate: AssignmentCreateOrConnectWithoutSubmissionsInput
  create: AssignmentCreateWithoutSubmissionsInput
}

input AssignmentCreateOrConnectWithoutCourseInput {
  create: AssignmentCreateWithoutCourseInput!
  where: AssignmentWhereUniqueInput!
}

input AssignmentCreateOrConnectWithoutSubmissionsInput {
  create: AssignmentCreateWithoutSubmissionsInput!
  where: AssignmentWhereUniqueInput!
}

input AssignmentCreateWithoutCourseInput {
  content: String!
  createdAt: DateTime
  deadline: DateTime!
  label: String!
  submissions: SubmissionCreateNestedManyWithoutAssignmentInput
  updatedAt: DateTime
}

input AssignmentCreateWithoutSubmissionsInput {
  content: String!
  course: CourseCreateNestedOneWithoutAssignmentsInput
  createdAt: DateTime
  deadline: DateTime!
  label: String!
  updatedAt: DateTime
}

type AssignmentGroupBy {
  _avg: AssignmentAvgAggregate
  _count: AssignmentCountAggregate
  _max: AssignmentMaxAggregate
  _min: AssignmentMinAggregate
  _sum: AssignmentSumAggregate
  content: String!
  courseId: Int
  createdAt: DateTime!
  deadline: DateTime!
  id: Int!
  label: String!
  updatedAt: DateTime!
}

input AssignmentListRelationFilter {
  every: AssignmentWhereInput
  none: AssignmentWhereInput
  some: AssignmentWhereInput
}

type AssignmentMaxAggregate {
  content: String
  courseId: Int
  createdAt: DateTime
  deadline: DateTime
  id: Int
  label: String
  updatedAt: DateTime
}

input AssignmentMaxOrderByAggregateInput {
  content: SortOrder
  courseId: SortOrder
  createdAt: SortOrder
  deadline: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

type AssignmentMinAggregate {
  content: String
  courseId: Int
  createdAt: DateTime
  deadline: DateTime
  id: Int
  label: String
  updatedAt: DateTime
}

input AssignmentMinOrderByAggregateInput {
  content: SortOrder
  courseId: SortOrder
  createdAt: SortOrder
  deadline: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input AssignmentOrderByRelationAggregateInput {
  _count: SortOrder
}

input AssignmentOrderByWithAggregationInput {
  _avg: AssignmentAvgOrderByAggregateInput
  _count: AssignmentCountOrderByAggregateInput
  _max: AssignmentMaxOrderByAggregateInput
  _min: AssignmentMinOrderByAggregateInput
  _sum: AssignmentSumOrderByAggregateInput
  content: SortOrder
  courseId: SortOrder
  createdAt: SortOrder
  deadline: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input AssignmentOrderByWithRelationInput {
  content: SortOrder
  course: CourseOrderByWithRelationInput
  courseId: SortOrder
  createdAt: SortOrder
  deadline: SortOrder
  id: SortOrder
  label: SortOrder
  submissions: SubmissionOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input AssignmentRelationFilter {
  is: AssignmentWhereInput
  isNot: AssignmentWhereInput
}

enum AssignmentScalarFieldEnum {
  content
  courseId
  createdAt
  deadline
  id
  label
  updatedAt
}

input AssignmentScalarWhereInput {
  AND: [AssignmentScalarWhereInput!]
  NOT: [AssignmentScalarWhereInput!]
  OR: [AssignmentScalarWhereInput!]
  content: StringFilter
  courseId: IntNullableFilter
  createdAt: DateTimeFilter
  deadline: DateTimeFilter
  id: IntFilter
  label: StringFilter
  updatedAt: DateTimeFilter
}

input AssignmentScalarWhereWithAggregatesInput {
  AND: [AssignmentScalarWhereWithAggregatesInput!]
  NOT: [AssignmentScalarWhereWithAggregatesInput!]
  OR: [AssignmentScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  courseId: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deadline: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  label: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AssignmentSumAggregate {
  courseId: Int
  id: Int
}

input AssignmentSumOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
}

input AssignmentUpdateInput {
  content: StringFieldUpdateOperationsInput
  course: CourseUpdateOneWithoutAssignmentsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  submissions: SubmissionUpdateManyWithoutAssignmentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AssignmentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AssignmentUpdateManyWithWhereWithoutCourseInput {
  data: AssignmentUpdateManyMutationInput!
  where: AssignmentScalarWhereInput!
}

input AssignmentUpdateManyWithoutCourseInput {
  connect: [AssignmentWhereUniqueInput!]
  connectOrCreate: [AssignmentCreateOrConnectWithoutCourseInput!]
  create: [AssignmentCreateWithoutCourseInput!]
  delete: [AssignmentWhereUniqueInput!]
  deleteMany: [AssignmentScalarWhereInput!]
  disconnect: [AssignmentWhereUniqueInput!]
  set: [AssignmentWhereUniqueInput!]
  update: [AssignmentUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [AssignmentUpdateManyWithWhereWithoutCourseInput!]
  upsert: [AssignmentUpsertWithWhereUniqueWithoutCourseInput!]
}

input AssignmentUpdateOneWithoutSubmissionsInput {
  connect: AssignmentWhereUniqueInput
  connectOrCreate: AssignmentCreateOrConnectWithoutSubmissionsInput
  create: AssignmentCreateWithoutSubmissionsInput
  delete: Boolean
  disconnect: Boolean
  update: AssignmentUpdateWithoutSubmissionsInput
  upsert: AssignmentUpsertWithoutSubmissionsInput
}

input AssignmentUpdateWithWhereUniqueWithoutCourseInput {
  data: AssignmentUpdateWithoutCourseInput!
  where: AssignmentWhereUniqueInput!
}

input AssignmentUpdateWithoutCourseInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  submissions: SubmissionUpdateManyWithoutAssignmentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AssignmentUpdateWithoutSubmissionsInput {
  content: StringFieldUpdateOperationsInput
  course: CourseUpdateOneWithoutAssignmentsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AssignmentUpsertWithWhereUniqueWithoutCourseInput {
  create: AssignmentCreateWithoutCourseInput!
  update: AssignmentUpdateWithoutCourseInput!
  where: AssignmentWhereUniqueInput!
}

input AssignmentUpsertWithoutSubmissionsInput {
  create: AssignmentCreateWithoutSubmissionsInput!
  update: AssignmentUpdateWithoutSubmissionsInput!
}

input AssignmentWhereInput {
  AND: [AssignmentWhereInput!]
  NOT: [AssignmentWhereInput!]
  OR: [AssignmentWhereInput!]
  content: StringFilter
  course: CourseRelationFilter
  courseId: IntNullableFilter
  createdAt: DateTimeFilter
  deadline: DateTimeFilter
  id: IntFilter
  label: StringFilter
  submissions: SubmissionListRelationFilter
  updatedAt: DateTimeFilter
}

input AssignmentWhereUniqueInput {
  id: Int
}

type Classroom {
  _count: ClassroomCount
  courses(cursor: CourseWhereUniqueInput, distinct: [CourseScalarFieldEnum!], orderBy: [CourseOrderByWithRelationInput!], skip: Int, take: Int, where: CourseWhereInput): [Course!]!
  createdAt: DateTime!
  department: Department
  departmentId: Int
  grades: Int!
  id: Int!
  label: String!
  students(cursor: StudentWhereUniqueInput, distinct: [StudentScalarFieldEnum!], orderBy: [StudentOrderByWithRelationInput!], skip: Int, take: Int, where: StudentWhereInput): [Student!]!
  updatedAt: DateTime!
}

type ClassroomAvgAggregate {
  departmentId: Float
  grades: Float
  id: Float
}

input ClassroomAvgOrderByAggregateInput {
  departmentId: SortOrder
  grades: SortOrder
  id: SortOrder
}

type ClassroomCount {
  courses: Int!
  students: Int!
}

type ClassroomCountAggregate {
  _all: Int!
  createdAt: Int!
  departmentId: Int!
  grades: Int!
  id: Int!
  label: Int!
  updatedAt: Int!
}

input ClassroomCountOrderByAggregateInput {
  createdAt: SortOrder
  departmentId: SortOrder
  grades: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input ClassroomCreateInput {
  courses: CourseCreateNestedManyWithoutClassroomInput
  createdAt: DateTime
  department: DepartmentCreateNestedOneWithoutClassroomsInput
  grades: Int!
  label: String!
  students: StudentCreateNestedManyWithoutClassroomInput
  updatedAt: DateTime
}

input ClassroomCreateNestedManyWithoutDepartmentInput {
  connect: [ClassroomWhereUniqueInput!]
  connectOrCreate: [ClassroomCreateOrConnectWithoutDepartmentInput!]
  create: [ClassroomCreateWithoutDepartmentInput!]
}

input ClassroomCreateNestedOneWithoutCoursesInput {
  connect: ClassroomWhereUniqueInput
  connectOrCreate: ClassroomCreateOrConnectWithoutCoursesInput
  create: ClassroomCreateWithoutCoursesInput
}

input ClassroomCreateNestedOneWithoutStudentsInput {
  connect: ClassroomWhereUniqueInput
  connectOrCreate: ClassroomCreateOrConnectWithoutStudentsInput
  create: ClassroomCreateWithoutStudentsInput
}

input ClassroomCreateOrConnectWithoutCoursesInput {
  create: ClassroomCreateWithoutCoursesInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomCreateOrConnectWithoutDepartmentInput {
  create: ClassroomCreateWithoutDepartmentInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomCreateOrConnectWithoutStudentsInput {
  create: ClassroomCreateWithoutStudentsInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomCreateWithoutCoursesInput {
  createdAt: DateTime
  department: DepartmentCreateNestedOneWithoutClassroomsInput
  grades: Int!
  label: String!
  students: StudentCreateNestedManyWithoutClassroomInput
  updatedAt: DateTime
}

input ClassroomCreateWithoutDepartmentInput {
  courses: CourseCreateNestedManyWithoutClassroomInput
  createdAt: DateTime
  grades: Int!
  label: String!
  students: StudentCreateNestedManyWithoutClassroomInput
  updatedAt: DateTime
}

input ClassroomCreateWithoutStudentsInput {
  courses: CourseCreateNestedManyWithoutClassroomInput
  createdAt: DateTime
  department: DepartmentCreateNestedOneWithoutClassroomsInput
  grades: Int!
  label: String!
  updatedAt: DateTime
}

type ClassroomGroupBy {
  _avg: ClassroomAvgAggregate
  _count: ClassroomCountAggregate
  _max: ClassroomMaxAggregate
  _min: ClassroomMinAggregate
  _sum: ClassroomSumAggregate
  createdAt: DateTime!
  departmentId: Int
  grades: Int!
  id: Int!
  label: String!
  updatedAt: DateTime!
}

input ClassroomListRelationFilter {
  every: ClassroomWhereInput
  none: ClassroomWhereInput
  some: ClassroomWhereInput
}

type ClassroomMaxAggregate {
  createdAt: DateTime
  departmentId: Int
  grades: Int
  id: Int
  label: String
  updatedAt: DateTime
}

input ClassroomMaxOrderByAggregateInput {
  createdAt: SortOrder
  departmentId: SortOrder
  grades: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

type ClassroomMinAggregate {
  createdAt: DateTime
  departmentId: Int
  grades: Int
  id: Int
  label: String
  updatedAt: DateTime
}

input ClassroomMinOrderByAggregateInput {
  createdAt: SortOrder
  departmentId: SortOrder
  grades: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input ClassroomOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClassroomOrderByWithAggregationInput {
  _avg: ClassroomAvgOrderByAggregateInput
  _count: ClassroomCountOrderByAggregateInput
  _max: ClassroomMaxOrderByAggregateInput
  _min: ClassroomMinOrderByAggregateInput
  _sum: ClassroomSumOrderByAggregateInput
  createdAt: SortOrder
  departmentId: SortOrder
  grades: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input ClassroomOrderByWithRelationInput {
  courses: CourseOrderByRelationAggregateInput
  createdAt: SortOrder
  department: DepartmentOrderByWithRelationInput
  departmentId: SortOrder
  grades: SortOrder
  id: SortOrder
  label: SortOrder
  students: StudentOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input ClassroomRelationFilter {
  is: ClassroomWhereInput
  isNot: ClassroomWhereInput
}

enum ClassroomScalarFieldEnum {
  createdAt
  departmentId
  grades
  id
  label
  updatedAt
}

input ClassroomScalarWhereInput {
  AND: [ClassroomScalarWhereInput!]
  NOT: [ClassroomScalarWhereInput!]
  OR: [ClassroomScalarWhereInput!]
  createdAt: DateTimeFilter
  departmentId: IntNullableFilter
  grades: IntFilter
  id: IntFilter
  label: StringFilter
  updatedAt: DateTimeFilter
}

input ClassroomScalarWhereWithAggregatesInput {
  AND: [ClassroomScalarWhereWithAggregatesInput!]
  NOT: [ClassroomScalarWhereWithAggregatesInput!]
  OR: [ClassroomScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  departmentId: IntNullableWithAggregatesFilter
  grades: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  label: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ClassroomSumAggregate {
  departmentId: Int
  grades: Int
  id: Int
}

input ClassroomSumOrderByAggregateInput {
  departmentId: SortOrder
  grades: SortOrder
  id: SortOrder
}

input ClassroomUpdateInput {
  courses: CourseUpdateManyWithoutClassroomInput
  createdAt: DateTimeFieldUpdateOperationsInput
  department: DepartmentUpdateOneWithoutClassroomsInput
  grades: IntFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  students: StudentUpdateManyWithoutClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  grades: IntFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateManyWithWhereWithoutDepartmentInput {
  data: ClassroomUpdateManyMutationInput!
  where: ClassroomScalarWhereInput!
}

input ClassroomUpdateManyWithoutDepartmentInput {
  connect: [ClassroomWhereUniqueInput!]
  connectOrCreate: [ClassroomCreateOrConnectWithoutDepartmentInput!]
  create: [ClassroomCreateWithoutDepartmentInput!]
  delete: [ClassroomWhereUniqueInput!]
  deleteMany: [ClassroomScalarWhereInput!]
  disconnect: [ClassroomWhereUniqueInput!]
  set: [ClassroomWhereUniqueInput!]
  update: [ClassroomUpdateWithWhereUniqueWithoutDepartmentInput!]
  updateMany: [ClassroomUpdateManyWithWhereWithoutDepartmentInput!]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutDepartmentInput!]
}

input ClassroomUpdateOneWithoutCoursesInput {
  connect: ClassroomWhereUniqueInput
  connectOrCreate: ClassroomCreateOrConnectWithoutCoursesInput
  create: ClassroomCreateWithoutCoursesInput
  delete: Boolean
  disconnect: Boolean
  update: ClassroomUpdateWithoutCoursesInput
  upsert: ClassroomUpsertWithoutCoursesInput
}

input ClassroomUpdateOneWithoutStudentsInput {
  connect: ClassroomWhereUniqueInput
  connectOrCreate: ClassroomCreateOrConnectWithoutStudentsInput
  create: ClassroomCreateWithoutStudentsInput
  delete: Boolean
  disconnect: Boolean
  update: ClassroomUpdateWithoutStudentsInput
  upsert: ClassroomUpsertWithoutStudentsInput
}

input ClassroomUpdateWithWhereUniqueWithoutDepartmentInput {
  data: ClassroomUpdateWithoutDepartmentInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomUpdateWithoutCoursesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  department: DepartmentUpdateOneWithoutClassroomsInput
  grades: IntFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  students: StudentUpdateManyWithoutClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateWithoutDepartmentInput {
  courses: CourseUpdateManyWithoutClassroomInput
  createdAt: DateTimeFieldUpdateOperationsInput
  grades: IntFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  students: StudentUpdateManyWithoutClassroomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpdateWithoutStudentsInput {
  courses: CourseUpdateManyWithoutClassroomInput
  createdAt: DateTimeFieldUpdateOperationsInput
  department: DepartmentUpdateOneWithoutClassroomsInput
  grades: IntFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassroomUpsertWithWhereUniqueWithoutDepartmentInput {
  create: ClassroomCreateWithoutDepartmentInput!
  update: ClassroomUpdateWithoutDepartmentInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomUpsertWithoutCoursesInput {
  create: ClassroomCreateWithoutCoursesInput!
  update: ClassroomUpdateWithoutCoursesInput!
}

input ClassroomUpsertWithoutStudentsInput {
  create: ClassroomCreateWithoutStudentsInput!
  update: ClassroomUpdateWithoutStudentsInput!
}

input ClassroomWhereInput {
  AND: [ClassroomWhereInput!]
  NOT: [ClassroomWhereInput!]
  OR: [ClassroomWhereInput!]
  courses: CourseListRelationFilter
  createdAt: DateTimeFilter
  department: DepartmentRelationFilter
  departmentId: IntNullableFilter
  grades: IntFilter
  id: IntFilter
  label: StringFilter
  students: StudentListRelationFilter
  updatedAt: DateTimeFilter
}

input ClassroomWhereUniqueInput {
  id: Int
}

type Course {
  _count: CourseCount
  assignments(cursor: AssignmentWhereUniqueInput, distinct: [AssignmentScalarFieldEnum!], orderBy: [AssignmentOrderByWithRelationInput!], skip: Int, take: Int, where: AssignmentWhereInput): [Assignment!]!
  classroom: Classroom
  classroomId: Int
  createdAt: DateTime!
  description: String!
  grade: Int
  hasVideos: String!
  id: Int!
  lessons(cursor: LessonWhereUniqueInput, distinct: [LessonScalarFieldEnum!], orderBy: [LessonOrderByWithRelationInput!], skip: Int, take: Int, where: LessonWhereInput): [Lesson!]!
  meetings(cursor: MeetingWhereUniqueInput, distinct: [MeetingScalarFieldEnum!], orderBy: [MeetingOrderByWithRelationInput!], skip: Int, take: Int, where: MeetingWhereInput): [Meeting!]!
  photo: String!
  progresses(cursor: ProgressWhereUniqueInput, distinct: [ProgressScalarFieldEnum!], orderBy: [ProgressOrderByWithRelationInput!], skip: Int, take: Int, where: ProgressWhereInput): [Progress!]!
  teacher: Teacher
  teacherId: Int
  title: String!
  updatedAt: DateTime!
}

type CourseAvgAggregate {
  classroomId: Float
  grade: Float
  id: Float
  teacherId: Float
}

input CourseAvgOrderByAggregateInput {
  classroomId: SortOrder
  grade: SortOrder
  id: SortOrder
  teacherId: SortOrder
}

type CourseCount {
  assignments: Int!
  lessons: Int!
  meetings: Int!
  progresses: Int!
}

type CourseCountAggregate {
  _all: Int!
  classroomId: Int!
  createdAt: Int!
  description: Int!
  grade: Int!
  hasVideos: Int!
  id: Int!
  photo: Int!
  teacherId: Int!
  title: Int!
  updatedAt: Int!
}

input CourseCountOrderByAggregateInput {
  classroomId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  grade: SortOrder
  hasVideos: SortOrder
  id: SortOrder
  photo: SortOrder
  teacherId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CourseCreateInput {
  assignments: AssignmentCreateNestedManyWithoutCourseInput
  classroom: ClassroomCreateNestedOneWithoutCoursesInput
  createdAt: DateTime
  description: String!
  grade: Int
  hasVideos: String!
  lessons: LessonCreateNestedManyWithoutCourseInput
  meetings: MeetingCreateNestedManyWithoutCourseInput
  photo: String!
  progresses: ProgressCreateNestedManyWithoutCourseInput
  teacher: TeacherCreateNestedOneWithoutCoursesInput
  title: String!
  updatedAt: DateTime
}

input CourseCreateNestedManyWithoutClassroomInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutClassroomInput!]
  create: [CourseCreateWithoutClassroomInput!]
}

input CourseCreateNestedManyWithoutTeacherInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutTeacherInput!]
  create: [CourseCreateWithoutTeacherInput!]
}

input CourseCreateNestedOneWithoutAssignmentsInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutAssignmentsInput
  create: CourseCreateWithoutAssignmentsInput
}

input CourseCreateNestedOneWithoutLessonsInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutLessonsInput
  create: CourseCreateWithoutLessonsInput
}

input CourseCreateNestedOneWithoutMeetingsInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutMeetingsInput
  create: CourseCreateWithoutMeetingsInput
}

input CourseCreateNestedOneWithoutProgressesInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutProgressesInput
  create: CourseCreateWithoutProgressesInput
}

input CourseCreateOrConnectWithoutAssignmentsInput {
  create: CourseCreateWithoutAssignmentsInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutClassroomInput {
  create: CourseCreateWithoutClassroomInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutLessonsInput {
  create: CourseCreateWithoutLessonsInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutMeetingsInput {
  create: CourseCreateWithoutMeetingsInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutProgressesInput {
  create: CourseCreateWithoutProgressesInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateOrConnectWithoutTeacherInput {
  create: CourseCreateWithoutTeacherInput!
  where: CourseWhereUniqueInput!
}

input CourseCreateWithoutAssignmentsInput {
  classroom: ClassroomCreateNestedOneWithoutCoursesInput
  createdAt: DateTime
  description: String!
  grade: Int
  hasVideos: String!
  lessons: LessonCreateNestedManyWithoutCourseInput
  meetings: MeetingCreateNestedManyWithoutCourseInput
  photo: String!
  progresses: ProgressCreateNestedManyWithoutCourseInput
  teacher: TeacherCreateNestedOneWithoutCoursesInput
  title: String!
  updatedAt: DateTime
}

input CourseCreateWithoutClassroomInput {
  assignments: AssignmentCreateNestedManyWithoutCourseInput
  createdAt: DateTime
  description: String!
  grade: Int
  hasVideos: String!
  lessons: LessonCreateNestedManyWithoutCourseInput
  meetings: MeetingCreateNestedManyWithoutCourseInput
  photo: String!
  progresses: ProgressCreateNestedManyWithoutCourseInput
  teacher: TeacherCreateNestedOneWithoutCoursesInput
  title: String!
  updatedAt: DateTime
}

input CourseCreateWithoutLessonsInput {
  assignments: AssignmentCreateNestedManyWithoutCourseInput
  classroom: ClassroomCreateNestedOneWithoutCoursesInput
  createdAt: DateTime
  description: String!
  grade: Int
  hasVideos: String!
  meetings: MeetingCreateNestedManyWithoutCourseInput
  photo: String!
  progresses: ProgressCreateNestedManyWithoutCourseInput
  teacher: TeacherCreateNestedOneWithoutCoursesInput
  title: String!
  updatedAt: DateTime
}

input CourseCreateWithoutMeetingsInput {
  assignments: AssignmentCreateNestedManyWithoutCourseInput
  classroom: ClassroomCreateNestedOneWithoutCoursesInput
  createdAt: DateTime
  description: String!
  grade: Int
  hasVideos: String!
  lessons: LessonCreateNestedManyWithoutCourseInput
  photo: String!
  progresses: ProgressCreateNestedManyWithoutCourseInput
  teacher: TeacherCreateNestedOneWithoutCoursesInput
  title: String!
  updatedAt: DateTime
}

input CourseCreateWithoutProgressesInput {
  assignments: AssignmentCreateNestedManyWithoutCourseInput
  classroom: ClassroomCreateNestedOneWithoutCoursesInput
  createdAt: DateTime
  description: String!
  grade: Int
  hasVideos: String!
  lessons: LessonCreateNestedManyWithoutCourseInput
  meetings: MeetingCreateNestedManyWithoutCourseInput
  photo: String!
  teacher: TeacherCreateNestedOneWithoutCoursesInput
  title: String!
  updatedAt: DateTime
}

input CourseCreateWithoutTeacherInput {
  assignments: AssignmentCreateNestedManyWithoutCourseInput
  classroom: ClassroomCreateNestedOneWithoutCoursesInput
  createdAt: DateTime
  description: String!
  grade: Int
  hasVideos: String!
  lessons: LessonCreateNestedManyWithoutCourseInput
  meetings: MeetingCreateNestedManyWithoutCourseInput
  photo: String!
  progresses: ProgressCreateNestedManyWithoutCourseInput
  title: String!
  updatedAt: DateTime
}

type CourseGroupBy {
  _avg: CourseAvgAggregate
  _count: CourseCountAggregate
  _max: CourseMaxAggregate
  _min: CourseMinAggregate
  _sum: CourseSumAggregate
  classroomId: Int
  createdAt: DateTime!
  description: String!
  grade: Int
  hasVideos: String!
  id: Int!
  photo: String!
  teacherId: Int
  title: String!
  updatedAt: DateTime!
}

input CourseListRelationFilter {
  every: CourseWhereInput
  none: CourseWhereInput
  some: CourseWhereInput
}

type CourseMaxAggregate {
  classroomId: Int
  createdAt: DateTime
  description: String
  grade: Int
  hasVideos: String
  id: Int
  photo: String
  teacherId: Int
  title: String
  updatedAt: DateTime
}

input CourseMaxOrderByAggregateInput {
  classroomId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  grade: SortOrder
  hasVideos: SortOrder
  id: SortOrder
  photo: SortOrder
  teacherId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type CourseMinAggregate {
  classroomId: Int
  createdAt: DateTime
  description: String
  grade: Int
  hasVideos: String
  id: Int
  photo: String
  teacherId: Int
  title: String
  updatedAt: DateTime
}

input CourseMinOrderByAggregateInput {
  classroomId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  grade: SortOrder
  hasVideos: SortOrder
  id: SortOrder
  photo: SortOrder
  teacherId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CourseOrderByRelationAggregateInput {
  _count: SortOrder
}

input CourseOrderByWithAggregationInput {
  _avg: CourseAvgOrderByAggregateInput
  _count: CourseCountOrderByAggregateInput
  _max: CourseMaxOrderByAggregateInput
  _min: CourseMinOrderByAggregateInput
  _sum: CourseSumOrderByAggregateInput
  classroomId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  grade: SortOrder
  hasVideos: SortOrder
  id: SortOrder
  photo: SortOrder
  teacherId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CourseOrderByWithRelationInput {
  assignments: AssignmentOrderByRelationAggregateInput
  classroom: ClassroomOrderByWithRelationInput
  classroomId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  grade: SortOrder
  hasVideos: SortOrder
  id: SortOrder
  lessons: LessonOrderByRelationAggregateInput
  meetings: MeetingOrderByRelationAggregateInput
  photo: SortOrder
  progresses: ProgressOrderByRelationAggregateInput
  teacher: TeacherOrderByWithRelationInput
  teacherId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CourseRelationFilter {
  is: CourseWhereInput
  isNot: CourseWhereInput
}

enum CourseScalarFieldEnum {
  classroomId
  createdAt
  description
  grade
  hasVideos
  id
  photo
  teacherId
  title
  updatedAt
}

input CourseScalarWhereInput {
  AND: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  classroomId: IntNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  grade: IntNullableFilter
  hasVideos: StringFilter
  id: IntFilter
  photo: StringFilter
  teacherId: IntNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input CourseScalarWhereWithAggregatesInput {
  AND: [CourseScalarWhereWithAggregatesInput!]
  NOT: [CourseScalarWhereWithAggregatesInput!]
  OR: [CourseScalarWhereWithAggregatesInput!]
  classroomId: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringWithAggregatesFilter
  grade: IntNullableWithAggregatesFilter
  hasVideos: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  photo: StringWithAggregatesFilter
  teacherId: IntNullableWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CourseSumAggregate {
  classroomId: Int
  grade: Int
  id: Int
  teacherId: Int
}

input CourseSumOrderByAggregateInput {
  classroomId: SortOrder
  grade: SortOrder
  id: SortOrder
  teacherId: SortOrder
}

input CourseUpdateInput {
  assignments: AssignmentUpdateManyWithoutCourseInput
  classroom: ClassroomUpdateOneWithoutCoursesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  grade: NullableIntFieldUpdateOperationsInput
  hasVideos: StringFieldUpdateOperationsInput
  lessons: LessonUpdateManyWithoutCourseInput
  meetings: MeetingUpdateManyWithoutCourseInput
  photo: StringFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutCourseInput
  teacher: TeacherUpdateOneWithoutCoursesInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CourseUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  grade: NullableIntFieldUpdateOperationsInput
  hasVideos: StringFieldUpdateOperationsInput
  photo: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CourseUpdateManyWithWhereWithoutClassroomInput {
  data: CourseUpdateManyMutationInput!
  where: CourseScalarWhereInput!
}

input CourseUpdateManyWithWhereWithoutTeacherInput {
  data: CourseUpdateManyMutationInput!
  where: CourseScalarWhereInput!
}

input CourseUpdateManyWithoutClassroomInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutClassroomInput!]
  create: [CourseCreateWithoutClassroomInput!]
  delete: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutClassroomInput!]
  updateMany: [CourseUpdateManyWithWhereWithoutClassroomInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutClassroomInput!]
}

input CourseUpdateManyWithoutTeacherInput {
  connect: [CourseWhereUniqueInput!]
  connectOrCreate: [CourseCreateOrConnectWithoutTeacherInput!]
  create: [CourseCreateWithoutTeacherInput!]
  delete: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutTeacherInput!]
  updateMany: [CourseUpdateManyWithWhereWithoutTeacherInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutTeacherInput!]
}

input CourseUpdateOneWithoutAssignmentsInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutAssignmentsInput
  create: CourseCreateWithoutAssignmentsInput
  delete: Boolean
  disconnect: Boolean
  update: CourseUpdateWithoutAssignmentsInput
  upsert: CourseUpsertWithoutAssignmentsInput
}

input CourseUpdateOneWithoutLessonsInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutLessonsInput
  create: CourseCreateWithoutLessonsInput
  delete: Boolean
  disconnect: Boolean
  update: CourseUpdateWithoutLessonsInput
  upsert: CourseUpsertWithoutLessonsInput
}

input CourseUpdateOneWithoutMeetingsInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutMeetingsInput
  create: CourseCreateWithoutMeetingsInput
  delete: Boolean
  disconnect: Boolean
  update: CourseUpdateWithoutMeetingsInput
  upsert: CourseUpsertWithoutMeetingsInput
}

input CourseUpdateOneWithoutProgressesInput {
  connect: CourseWhereUniqueInput
  connectOrCreate: CourseCreateOrConnectWithoutProgressesInput
  create: CourseCreateWithoutProgressesInput
  delete: Boolean
  disconnect: Boolean
  update: CourseUpdateWithoutProgressesInput
  upsert: CourseUpsertWithoutProgressesInput
}

input CourseUpdateWithWhereUniqueWithoutClassroomInput {
  data: CourseUpdateWithoutClassroomInput!
  where: CourseWhereUniqueInput!
}

input CourseUpdateWithWhereUniqueWithoutTeacherInput {
  data: CourseUpdateWithoutTeacherInput!
  where: CourseWhereUniqueInput!
}

input CourseUpdateWithoutAssignmentsInput {
  classroom: ClassroomUpdateOneWithoutCoursesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  grade: NullableIntFieldUpdateOperationsInput
  hasVideos: StringFieldUpdateOperationsInput
  lessons: LessonUpdateManyWithoutCourseInput
  meetings: MeetingUpdateManyWithoutCourseInput
  photo: StringFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutCourseInput
  teacher: TeacherUpdateOneWithoutCoursesInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CourseUpdateWithoutClassroomInput {
  assignments: AssignmentUpdateManyWithoutCourseInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  grade: NullableIntFieldUpdateOperationsInput
  hasVideos: StringFieldUpdateOperationsInput
  lessons: LessonUpdateManyWithoutCourseInput
  meetings: MeetingUpdateManyWithoutCourseInput
  photo: StringFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutCourseInput
  teacher: TeacherUpdateOneWithoutCoursesInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CourseUpdateWithoutLessonsInput {
  assignments: AssignmentUpdateManyWithoutCourseInput
  classroom: ClassroomUpdateOneWithoutCoursesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  grade: NullableIntFieldUpdateOperationsInput
  hasVideos: StringFieldUpdateOperationsInput
  meetings: MeetingUpdateManyWithoutCourseInput
  photo: StringFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutCourseInput
  teacher: TeacherUpdateOneWithoutCoursesInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CourseUpdateWithoutMeetingsInput {
  assignments: AssignmentUpdateManyWithoutCourseInput
  classroom: ClassroomUpdateOneWithoutCoursesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  grade: NullableIntFieldUpdateOperationsInput
  hasVideos: StringFieldUpdateOperationsInput
  lessons: LessonUpdateManyWithoutCourseInput
  photo: StringFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutCourseInput
  teacher: TeacherUpdateOneWithoutCoursesInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CourseUpdateWithoutProgressesInput {
  assignments: AssignmentUpdateManyWithoutCourseInput
  classroom: ClassroomUpdateOneWithoutCoursesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  grade: NullableIntFieldUpdateOperationsInput
  hasVideos: StringFieldUpdateOperationsInput
  lessons: LessonUpdateManyWithoutCourseInput
  meetings: MeetingUpdateManyWithoutCourseInput
  photo: StringFieldUpdateOperationsInput
  teacher: TeacherUpdateOneWithoutCoursesInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CourseUpdateWithoutTeacherInput {
  assignments: AssignmentUpdateManyWithoutCourseInput
  classroom: ClassroomUpdateOneWithoutCoursesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  grade: NullableIntFieldUpdateOperationsInput
  hasVideos: StringFieldUpdateOperationsInput
  lessons: LessonUpdateManyWithoutCourseInput
  meetings: MeetingUpdateManyWithoutCourseInput
  photo: StringFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutCourseInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CourseUpsertWithWhereUniqueWithoutClassroomInput {
  create: CourseCreateWithoutClassroomInput!
  update: CourseUpdateWithoutClassroomInput!
  where: CourseWhereUniqueInput!
}

input CourseUpsertWithWhereUniqueWithoutTeacherInput {
  create: CourseCreateWithoutTeacherInput!
  update: CourseUpdateWithoutTeacherInput!
  where: CourseWhereUniqueInput!
}

input CourseUpsertWithoutAssignmentsInput {
  create: CourseCreateWithoutAssignmentsInput!
  update: CourseUpdateWithoutAssignmentsInput!
}

input CourseUpsertWithoutLessonsInput {
  create: CourseCreateWithoutLessonsInput!
  update: CourseUpdateWithoutLessonsInput!
}

input CourseUpsertWithoutMeetingsInput {
  create: CourseCreateWithoutMeetingsInput!
  update: CourseUpdateWithoutMeetingsInput!
}

input CourseUpsertWithoutProgressesInput {
  create: CourseCreateWithoutProgressesInput!
  update: CourseUpdateWithoutProgressesInput!
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  assignments: AssignmentListRelationFilter
  classroom: ClassroomRelationFilter
  classroomId: IntNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  grade: IntNullableFilter
  hasVideos: StringFilter
  id: IntFilter
  lessons: LessonListRelationFilter
  meetings: MeetingListRelationFilter
  photo: StringFilter
  progresses: ProgressListRelationFilter
  teacher: TeacherRelationFilter
  teacherId: IntNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input CourseWhereUniqueInput {
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

type Department {
  _count: DepartmentCount
  classrooms(cursor: ClassroomWhereUniqueInput, distinct: [ClassroomScalarFieldEnum!], orderBy: [ClassroomOrderByWithRelationInput!], skip: Int, take: Int, where: ClassroomWhereInput): [Classroom!]!
  createdAt: DateTime!
  id: Int!
  label: String!
  updatedAt: DateTime!
}

type DepartmentAvgAggregate {
  id: Float
}

input DepartmentAvgOrderByAggregateInput {
  id: SortOrder
}

type DepartmentCount {
  classrooms: Int!
}

type DepartmentCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  label: Int!
  updatedAt: Int!
}

input DepartmentCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input DepartmentCreateInput {
  classrooms: ClassroomCreateNestedManyWithoutDepartmentInput
  createdAt: DateTime
  label: String!
  updatedAt: DateTime
}

input DepartmentCreateNestedOneWithoutClassroomsInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutClassroomsInput
  create: DepartmentCreateWithoutClassroomsInput
}

input DepartmentCreateOrConnectWithoutClassroomsInput {
  create: DepartmentCreateWithoutClassroomsInput!
  where: DepartmentWhereUniqueInput!
}

input DepartmentCreateWithoutClassroomsInput {
  createdAt: DateTime
  label: String!
  updatedAt: DateTime
}

type DepartmentGroupBy {
  _avg: DepartmentAvgAggregate
  _count: DepartmentCountAggregate
  _max: DepartmentMaxAggregate
  _min: DepartmentMinAggregate
  _sum: DepartmentSumAggregate
  createdAt: DateTime!
  id: Int!
  label: String!
  updatedAt: DateTime!
}

type DepartmentMaxAggregate {
  createdAt: DateTime
  id: Int
  label: String
  updatedAt: DateTime
}

input DepartmentMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

type DepartmentMinAggregate {
  createdAt: DateTime
  id: Int
  label: String
  updatedAt: DateTime
}

input DepartmentMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input DepartmentOrderByWithAggregationInput {
  _avg: DepartmentAvgOrderByAggregateInput
  _count: DepartmentCountOrderByAggregateInput
  _max: DepartmentMaxOrderByAggregateInput
  _min: DepartmentMinOrderByAggregateInput
  _sum: DepartmentSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input DepartmentOrderByWithRelationInput {
  classrooms: ClassroomOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
}

input DepartmentRelationFilter {
  is: DepartmentWhereInput
  isNot: DepartmentWhereInput
}

enum DepartmentScalarFieldEnum {
  createdAt
  id
  label
  updatedAt
}

input DepartmentScalarWhereWithAggregatesInput {
  AND: [DepartmentScalarWhereWithAggregatesInput!]
  NOT: [DepartmentScalarWhereWithAggregatesInput!]
  OR: [DepartmentScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  label: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type DepartmentSumAggregate {
  id: Int
}

input DepartmentSumOrderByAggregateInput {
  id: SortOrder
}

input DepartmentUpdateInput {
  classrooms: ClassroomUpdateManyWithoutDepartmentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpdateOneWithoutClassroomsInput {
  connect: DepartmentWhereUniqueInput
  connectOrCreate: DepartmentCreateOrConnectWithoutClassroomsInput
  create: DepartmentCreateWithoutClassroomsInput
  delete: Boolean
  disconnect: Boolean
  update: DepartmentUpdateWithoutClassroomsInput
  upsert: DepartmentUpsertWithoutClassroomsInput
}

input DepartmentUpdateWithoutClassroomsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DepartmentUpsertWithoutClassroomsInput {
  create: DepartmentCreateWithoutClassroomsInput!
  update: DepartmentUpdateWithoutClassroomsInput!
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  classrooms: ClassroomListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  label: StringFilter
  updatedAt: DateTimeFilter
}

input DepartmentWhereUniqueInput {
  id: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Lesson {
  content: String!
  course: Course
  courseId: Int
  createdAt: DateTime!
  description: String!
  id: Int!
  label: String!
  number: Int!
  updatedAt: DateTime!
}

type LessonAvgAggregate {
  courseId: Float
  id: Float
  number: Float
}

input LessonAvgOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
  number: SortOrder
}

type LessonCountAggregate {
  _all: Int!
  content: Int!
  courseId: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  label: Int!
  number: Int!
  updatedAt: Int!
}

input LessonCountOrderByAggregateInput {
  content: SortOrder
  courseId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  label: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

input LessonCreateInput {
  content: String!
  course: CourseCreateNestedOneWithoutLessonsInput
  createdAt: DateTime
  description: String!
  label: String!
  number: Int!
  updatedAt: DateTime
}

input LessonCreateNestedManyWithoutCourseInput {
  connect: [LessonWhereUniqueInput!]
  connectOrCreate: [LessonCreateOrConnectWithoutCourseInput!]
  create: [LessonCreateWithoutCourseInput!]
}

input LessonCreateOrConnectWithoutCourseInput {
  create: LessonCreateWithoutCourseInput!
  where: LessonWhereUniqueInput!
}

input LessonCreateWithoutCourseInput {
  content: String!
  createdAt: DateTime
  description: String!
  label: String!
  number: Int!
  updatedAt: DateTime
}

type LessonGroupBy {
  _avg: LessonAvgAggregate
  _count: LessonCountAggregate
  _max: LessonMaxAggregate
  _min: LessonMinAggregate
  _sum: LessonSumAggregate
  content: String!
  courseId: Int
  createdAt: DateTime!
  description: String!
  id: Int!
  label: String!
  number: Int!
  updatedAt: DateTime!
}

input LessonListRelationFilter {
  every: LessonWhereInput
  none: LessonWhereInput
  some: LessonWhereInput
}

type LessonMaxAggregate {
  content: String
  courseId: Int
  createdAt: DateTime
  description: String
  id: Int
  label: String
  number: Int
  updatedAt: DateTime
}

input LessonMaxOrderByAggregateInput {
  content: SortOrder
  courseId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  label: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

type LessonMinAggregate {
  content: String
  courseId: Int
  createdAt: DateTime
  description: String
  id: Int
  label: String
  number: Int
  updatedAt: DateTime
}

input LessonMinOrderByAggregateInput {
  content: SortOrder
  courseId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  label: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

input LessonOrderByRelationAggregateInput {
  _count: SortOrder
}

input LessonOrderByWithAggregationInput {
  _avg: LessonAvgOrderByAggregateInput
  _count: LessonCountOrderByAggregateInput
  _max: LessonMaxOrderByAggregateInput
  _min: LessonMinOrderByAggregateInput
  _sum: LessonSumOrderByAggregateInput
  content: SortOrder
  courseId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  label: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

input LessonOrderByWithRelationInput {
  content: SortOrder
  course: CourseOrderByWithRelationInput
  courseId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  label: SortOrder
  number: SortOrder
  updatedAt: SortOrder
}

enum LessonScalarFieldEnum {
  content
  courseId
  createdAt
  description
  id
  label
  number
  updatedAt
}

input LessonScalarWhereInput {
  AND: [LessonScalarWhereInput!]
  NOT: [LessonScalarWhereInput!]
  OR: [LessonScalarWhereInput!]
  content: StringFilter
  courseId: IntNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  label: StringFilter
  number: IntFilter
  updatedAt: DateTimeFilter
}

input LessonScalarWhereWithAggregatesInput {
  AND: [LessonScalarWhereWithAggregatesInput!]
  NOT: [LessonScalarWhereWithAggregatesInput!]
  OR: [LessonScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  courseId: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  label: StringWithAggregatesFilter
  number: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type LessonSumAggregate {
  courseId: Int
  id: Int
  number: Int
}

input LessonSumOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
  number: SortOrder
}

input LessonUpdateInput {
  content: StringFieldUpdateOperationsInput
  course: CourseUpdateOneWithoutLessonsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LessonUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LessonUpdateManyWithWhereWithoutCourseInput {
  data: LessonUpdateManyMutationInput!
  where: LessonScalarWhereInput!
}

input LessonUpdateManyWithoutCourseInput {
  connect: [LessonWhereUniqueInput!]
  connectOrCreate: [LessonCreateOrConnectWithoutCourseInput!]
  create: [LessonCreateWithoutCourseInput!]
  delete: [LessonWhereUniqueInput!]
  deleteMany: [LessonScalarWhereInput!]
  disconnect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [LessonUpdateManyWithWhereWithoutCourseInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutCourseInput!]
}

input LessonUpdateWithWhereUniqueWithoutCourseInput {
  data: LessonUpdateWithoutCourseInput!
  where: LessonWhereUniqueInput!
}

input LessonUpdateWithoutCourseInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  number: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LessonUpsertWithWhereUniqueWithoutCourseInput {
  create: LessonCreateWithoutCourseInput!
  update: LessonUpdateWithoutCourseInput!
  where: LessonWhereUniqueInput!
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  content: StringFilter
  course: CourseRelationFilter
  courseId: IntNullableFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  label: StringFilter
  number: IntFilter
  updatedAt: DateTimeFilter
}

input LessonWhereUniqueInput {
  id: Int
}

type Meeting {
  course: Course
  courseId: Int
  createdAt: DateTime!
  duration: DateTime!
  id: Int!
  link: String!
  meetingAt: DateTime!
  updatedAt: DateTime!
}

type MeetingAvgAggregate {
  courseId: Float
  id: Float
}

input MeetingAvgOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
}

type MeetingCountAggregate {
  _all: Int!
  courseId: Int!
  createdAt: Int!
  duration: Int!
  id: Int!
  link: Int!
  meetingAt: Int!
  updatedAt: Int!
}

input MeetingCountOrderByAggregateInput {
  courseId: SortOrder
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  link: SortOrder
  meetingAt: SortOrder
  updatedAt: SortOrder
}

input MeetingCreateInput {
  course: CourseCreateNestedOneWithoutMeetingsInput
  createdAt: DateTime
  duration: DateTime!
  link: String!
  meetingAt: DateTime!
  updatedAt: DateTime
}

input MeetingCreateNestedManyWithoutCourseInput {
  connect: [MeetingWhereUniqueInput!]
  connectOrCreate: [MeetingCreateOrConnectWithoutCourseInput!]
  create: [MeetingCreateWithoutCourseInput!]
}

input MeetingCreateOrConnectWithoutCourseInput {
  create: MeetingCreateWithoutCourseInput!
  where: MeetingWhereUniqueInput!
}

input MeetingCreateWithoutCourseInput {
  createdAt: DateTime
  duration: DateTime!
  link: String!
  meetingAt: DateTime!
  updatedAt: DateTime
}

type MeetingGroupBy {
  _avg: MeetingAvgAggregate
  _count: MeetingCountAggregate
  _max: MeetingMaxAggregate
  _min: MeetingMinAggregate
  _sum: MeetingSumAggregate
  courseId: Int
  createdAt: DateTime!
  duration: DateTime!
  id: Int!
  link: String!
  meetingAt: DateTime!
  updatedAt: DateTime!
}

input MeetingListRelationFilter {
  every: MeetingWhereInput
  none: MeetingWhereInput
  some: MeetingWhereInput
}

type MeetingMaxAggregate {
  courseId: Int
  createdAt: DateTime
  duration: DateTime
  id: Int
  link: String
  meetingAt: DateTime
  updatedAt: DateTime
}

input MeetingMaxOrderByAggregateInput {
  courseId: SortOrder
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  link: SortOrder
  meetingAt: SortOrder
  updatedAt: SortOrder
}

type MeetingMinAggregate {
  courseId: Int
  createdAt: DateTime
  duration: DateTime
  id: Int
  link: String
  meetingAt: DateTime
  updatedAt: DateTime
}

input MeetingMinOrderByAggregateInput {
  courseId: SortOrder
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  link: SortOrder
  meetingAt: SortOrder
  updatedAt: SortOrder
}

input MeetingOrderByRelationAggregateInput {
  _count: SortOrder
}

input MeetingOrderByWithAggregationInput {
  _avg: MeetingAvgOrderByAggregateInput
  _count: MeetingCountOrderByAggregateInput
  _max: MeetingMaxOrderByAggregateInput
  _min: MeetingMinOrderByAggregateInput
  _sum: MeetingSumOrderByAggregateInput
  courseId: SortOrder
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  link: SortOrder
  meetingAt: SortOrder
  updatedAt: SortOrder
}

input MeetingOrderByWithRelationInput {
  course: CourseOrderByWithRelationInput
  courseId: SortOrder
  createdAt: SortOrder
  duration: SortOrder
  id: SortOrder
  link: SortOrder
  meetingAt: SortOrder
  updatedAt: SortOrder
}

enum MeetingScalarFieldEnum {
  courseId
  createdAt
  duration
  id
  link
  meetingAt
  updatedAt
}

input MeetingScalarWhereInput {
  AND: [MeetingScalarWhereInput!]
  NOT: [MeetingScalarWhereInput!]
  OR: [MeetingScalarWhereInput!]
  courseId: IntNullableFilter
  createdAt: DateTimeFilter
  duration: DateTimeFilter
  id: IntFilter
  link: StringFilter
  meetingAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input MeetingScalarWhereWithAggregatesInput {
  AND: [MeetingScalarWhereWithAggregatesInput!]
  NOT: [MeetingScalarWhereWithAggregatesInput!]
  OR: [MeetingScalarWhereWithAggregatesInput!]
  courseId: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  duration: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  link: StringWithAggregatesFilter
  meetingAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type MeetingSumAggregate {
  courseId: Int
  id: Int
}

input MeetingSumOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
}

input MeetingUpdateInput {
  course: CourseUpdateOneWithoutMeetingsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: DateTimeFieldUpdateOperationsInput
  link: StringFieldUpdateOperationsInput
  meetingAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MeetingUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: DateTimeFieldUpdateOperationsInput
  link: StringFieldUpdateOperationsInput
  meetingAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MeetingUpdateManyWithWhereWithoutCourseInput {
  data: MeetingUpdateManyMutationInput!
  where: MeetingScalarWhereInput!
}

input MeetingUpdateManyWithoutCourseInput {
  connect: [MeetingWhereUniqueInput!]
  connectOrCreate: [MeetingCreateOrConnectWithoutCourseInput!]
  create: [MeetingCreateWithoutCourseInput!]
  delete: [MeetingWhereUniqueInput!]
  deleteMany: [MeetingScalarWhereInput!]
  disconnect: [MeetingWhereUniqueInput!]
  set: [MeetingWhereUniqueInput!]
  update: [MeetingUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [MeetingUpdateManyWithWhereWithoutCourseInput!]
  upsert: [MeetingUpsertWithWhereUniqueWithoutCourseInput!]
}

input MeetingUpdateWithWhereUniqueWithoutCourseInput {
  data: MeetingUpdateWithoutCourseInput!
  where: MeetingWhereUniqueInput!
}

input MeetingUpdateWithoutCourseInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  duration: DateTimeFieldUpdateOperationsInput
  link: StringFieldUpdateOperationsInput
  meetingAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MeetingUpsertWithWhereUniqueWithoutCourseInput {
  create: MeetingCreateWithoutCourseInput!
  update: MeetingUpdateWithoutCourseInput!
  where: MeetingWhereUniqueInput!
}

input MeetingWhereInput {
  AND: [MeetingWhereInput!]
  NOT: [MeetingWhereInput!]
  OR: [MeetingWhereInput!]
  course: CourseRelationFilter
  courseId: IntNullableFilter
  createdAt: DateTimeFilter
  duration: DateTimeFilter
  id: IntFilter
  link: StringFilter
  meetingAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input MeetingWhereUniqueInput {
  id: Int
}

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin!
  createAssignment(data: AssignmentCreateInput!): Assignment!
  createClassroom(data: ClassroomCreateInput!): Classroom!
  createCourse(data: CourseCreateInput!): Course!
  createDepartment(data: DepartmentCreateInput!): Department!
  createLesson(data: LessonCreateInput!): Lesson!
  createMeeting(data: MeetingCreateInput!): Meeting!
  createProgress(data: ProgressCreateInput!): Progress!
  createStudent(data: StudentCreateInput!): Student!
  createSubmission(data: SubmissionCreateInput!): Submission!
  createTeacher(data: TeacherCreateInput!): Teacher!
  createUser(data: UserCreateInput!): User!
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAssignment(where: AssignmentWhereUniqueInput!): Assignment
  deleteClassroom(where: ClassroomWhereUniqueInput!): Classroom
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteManyAdmin(where: AdminWhereInput): AffectedRowsOutput!
  deleteManyAssignment(where: AssignmentWhereInput): AffectedRowsOutput!
  deleteManyClassroom(where: ClassroomWhereInput): AffectedRowsOutput!
  deleteManyCourse(where: CourseWhereInput): AffectedRowsOutput!
  deleteManyDepartment(where: DepartmentWhereInput): AffectedRowsOutput!
  deleteManyLesson(where: LessonWhereInput): AffectedRowsOutput!
  deleteManyMeeting(where: MeetingWhereInput): AffectedRowsOutput!
  deleteManyProgress(where: ProgressWhereInput): AffectedRowsOutput!
  deleteManyStudent(where: StudentWhereInput): AffectedRowsOutput!
  deleteManySubmission(where: SubmissionWhereInput): AffectedRowsOutput!
  deleteManyTeacher(where: TeacherWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteMeeting(where: MeetingWhereUniqueInput!): Meeting
  deleteProgress(where: ProgressWhereUniqueInput!): Progress
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteSubmission(where: SubmissionWhereUniqueInput!): Submission
  deleteTeacher(where: TeacherWhereUniqueInput!): Teacher
  deleteUser(where: UserWhereUniqueInput!): User
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateAssignment(data: AssignmentUpdateInput!, where: AssignmentWhereUniqueInput!): Assignment
  updateClassroom(data: ClassroomUpdateInput!, where: ClassroomWhereUniqueInput!): Classroom
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateManyAdmin(data: AdminUpdateManyMutationInput!, where: AdminWhereInput): AffectedRowsOutput!
  updateManyAssignment(data: AssignmentUpdateManyMutationInput!, where: AssignmentWhereInput): AffectedRowsOutput!
  updateManyClassroom(data: ClassroomUpdateManyMutationInput!, where: ClassroomWhereInput): AffectedRowsOutput!
  updateManyCourse(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): AffectedRowsOutput!
  updateManyDepartment(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): AffectedRowsOutput!
  updateManyLesson(data: LessonUpdateManyMutationInput!, where: LessonWhereInput): AffectedRowsOutput!
  updateManyMeeting(data: MeetingUpdateManyMutationInput!, where: MeetingWhereInput): AffectedRowsOutput!
  updateManyProgress(data: ProgressUpdateManyMutationInput!, where: ProgressWhereInput): AffectedRowsOutput!
  updateManyStudent(data: StudentUpdateManyMutationInput!, where: StudentWhereInput): AffectedRowsOutput!
  updateManySubmission(data: SubmissionUpdateManyMutationInput!, where: SubmissionWhereInput): AffectedRowsOutput!
  updateManyTeacher(data: TeacherUpdateManyMutationInput!, where: TeacherWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateMeeting(data: MeetingUpdateInput!, where: MeetingWhereUniqueInput!): Meeting
  updateProgress(data: ProgressUpdateInput!, where: ProgressWhereUniqueInput!): Progress
  updateStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student
  updateSubmission(data: SubmissionUpdateInput!, where: SubmissionWhereUniqueInput!): Submission
  updateTeacher(data: TeacherUpdateInput!, where: TeacherWhereUniqueInput!): Teacher
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertAdmin(create: AdminCreateInput!, update: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin!
  upsertAssignment(create: AssignmentCreateInput!, update: AssignmentUpdateInput!, where: AssignmentWhereUniqueInput!): Assignment!
  upsertClassroom(create: ClassroomCreateInput!, update: ClassroomUpdateInput!, where: ClassroomWhereUniqueInput!): Classroom!
  upsertCourse(create: CourseCreateInput!, update: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course!
  upsertDepartment(create: DepartmentCreateInput!, update: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department!
  upsertLesson(create: LessonCreateInput!, update: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson!
  upsertMeeting(create: MeetingCreateInput!, update: MeetingUpdateInput!, where: MeetingWhereUniqueInput!): Meeting!
  upsertProgress(create: ProgressCreateInput!, update: ProgressUpdateInput!, where: ProgressWhereUniqueInput!): Progress!
  upsertStudent(create: StudentCreateInput!, update: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student!
  upsertSubmission(create: SubmissionCreateInput!, update: SubmissionUpdateInput!, where: SubmissionWhereUniqueInput!): Submission!
  upsertTeacher(create: TeacherCreateInput!, update: TeacherUpdateInput!, where: TeacherWhereUniqueInput!): Teacher!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

type Progress {
  course: Course
  courseId: Int
  id: Int!
  lesson: Int!
  student: Student
  studentId: Int
}

type ProgressAvgAggregate {
  courseId: Float
  id: Float
  lesson: Float
  studentId: Float
}

input ProgressAvgOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
  lesson: SortOrder
  studentId: SortOrder
}

type ProgressCountAggregate {
  _all: Int!
  courseId: Int!
  id: Int!
  lesson: Int!
  studentId: Int!
}

input ProgressCountOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
  lesson: SortOrder
  studentId: SortOrder
}

input ProgressCreateInput {
  course: CourseCreateNestedOneWithoutProgressesInput
  lesson: Int!
  student: StudentCreateNestedOneWithoutProgressesInput
}

input ProgressCreateNestedManyWithoutCourseInput {
  connect: [ProgressWhereUniqueInput!]
  connectOrCreate: [ProgressCreateOrConnectWithoutCourseInput!]
  create: [ProgressCreateWithoutCourseInput!]
}

input ProgressCreateNestedManyWithoutStudentInput {
  connect: [ProgressWhereUniqueInput!]
  connectOrCreate: [ProgressCreateOrConnectWithoutStudentInput!]
  create: [ProgressCreateWithoutStudentInput!]
}

input ProgressCreateOrConnectWithoutCourseInput {
  create: ProgressCreateWithoutCourseInput!
  where: ProgressWhereUniqueInput!
}

input ProgressCreateOrConnectWithoutStudentInput {
  create: ProgressCreateWithoutStudentInput!
  where: ProgressWhereUniqueInput!
}

input ProgressCreateWithoutCourseInput {
  lesson: Int!
  student: StudentCreateNestedOneWithoutProgressesInput
}

input ProgressCreateWithoutStudentInput {
  course: CourseCreateNestedOneWithoutProgressesInput
  lesson: Int!
}

type ProgressGroupBy {
  _avg: ProgressAvgAggregate
  _count: ProgressCountAggregate
  _max: ProgressMaxAggregate
  _min: ProgressMinAggregate
  _sum: ProgressSumAggregate
  courseId: Int
  id: Int!
  lesson: Int!
  studentId: Int
}

input ProgressListRelationFilter {
  every: ProgressWhereInput
  none: ProgressWhereInput
  some: ProgressWhereInput
}

type ProgressMaxAggregate {
  courseId: Int
  id: Int
  lesson: Int
  studentId: Int
}

input ProgressMaxOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
  lesson: SortOrder
  studentId: SortOrder
}

type ProgressMinAggregate {
  courseId: Int
  id: Int
  lesson: Int
  studentId: Int
}

input ProgressMinOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
  lesson: SortOrder
  studentId: SortOrder
}

input ProgressOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgressOrderByWithAggregationInput {
  _avg: ProgressAvgOrderByAggregateInput
  _count: ProgressCountOrderByAggregateInput
  _max: ProgressMaxOrderByAggregateInput
  _min: ProgressMinOrderByAggregateInput
  _sum: ProgressSumOrderByAggregateInput
  courseId: SortOrder
  id: SortOrder
  lesson: SortOrder
  studentId: SortOrder
}

input ProgressOrderByWithRelationInput {
  course: CourseOrderByWithRelationInput
  courseId: SortOrder
  id: SortOrder
  lesson: SortOrder
  student: StudentOrderByWithRelationInput
  studentId: SortOrder
}

enum ProgressScalarFieldEnum {
  courseId
  id
  lesson
  studentId
}

input ProgressScalarWhereInput {
  AND: [ProgressScalarWhereInput!]
  NOT: [ProgressScalarWhereInput!]
  OR: [ProgressScalarWhereInput!]
  courseId: IntNullableFilter
  id: IntFilter
  lesson: IntFilter
  studentId: IntNullableFilter
}

input ProgressScalarWhereWithAggregatesInput {
  AND: [ProgressScalarWhereWithAggregatesInput!]
  NOT: [ProgressScalarWhereWithAggregatesInput!]
  OR: [ProgressScalarWhereWithAggregatesInput!]
  courseId: IntNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  lesson: IntWithAggregatesFilter
  studentId: IntNullableWithAggregatesFilter
}

type ProgressSumAggregate {
  courseId: Int
  id: Int
  lesson: Int
  studentId: Int
}

input ProgressSumOrderByAggregateInput {
  courseId: SortOrder
  id: SortOrder
  lesson: SortOrder
  studentId: SortOrder
}

input ProgressUpdateInput {
  course: CourseUpdateOneWithoutProgressesInput
  lesson: IntFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutProgressesInput
}

input ProgressUpdateManyMutationInput {
  lesson: IntFieldUpdateOperationsInput
}

input ProgressUpdateManyWithWhereWithoutCourseInput {
  data: ProgressUpdateManyMutationInput!
  where: ProgressScalarWhereInput!
}

input ProgressUpdateManyWithWhereWithoutStudentInput {
  data: ProgressUpdateManyMutationInput!
  where: ProgressScalarWhereInput!
}

input ProgressUpdateManyWithoutCourseInput {
  connect: [ProgressWhereUniqueInput!]
  connectOrCreate: [ProgressCreateOrConnectWithoutCourseInput!]
  create: [ProgressCreateWithoutCourseInput!]
  delete: [ProgressWhereUniqueInput!]
  deleteMany: [ProgressScalarWhereInput!]
  disconnect: [ProgressWhereUniqueInput!]
  set: [ProgressWhereUniqueInput!]
  update: [ProgressUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [ProgressUpdateManyWithWhereWithoutCourseInput!]
  upsert: [ProgressUpsertWithWhereUniqueWithoutCourseInput!]
}

input ProgressUpdateManyWithoutStudentInput {
  connect: [ProgressWhereUniqueInput!]
  connectOrCreate: [ProgressCreateOrConnectWithoutStudentInput!]
  create: [ProgressCreateWithoutStudentInput!]
  delete: [ProgressWhereUniqueInput!]
  deleteMany: [ProgressScalarWhereInput!]
  disconnect: [ProgressWhereUniqueInput!]
  set: [ProgressWhereUniqueInput!]
  update: [ProgressUpdateWithWhereUniqueWithoutStudentInput!]
  updateMany: [ProgressUpdateManyWithWhereWithoutStudentInput!]
  upsert: [ProgressUpsertWithWhereUniqueWithoutStudentInput!]
}

input ProgressUpdateWithWhereUniqueWithoutCourseInput {
  data: ProgressUpdateWithoutCourseInput!
  where: ProgressWhereUniqueInput!
}

input ProgressUpdateWithWhereUniqueWithoutStudentInput {
  data: ProgressUpdateWithoutStudentInput!
  where: ProgressWhereUniqueInput!
}

input ProgressUpdateWithoutCourseInput {
  lesson: IntFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutProgressesInput
}

input ProgressUpdateWithoutStudentInput {
  course: CourseUpdateOneWithoutProgressesInput
  lesson: IntFieldUpdateOperationsInput
}

input ProgressUpsertWithWhereUniqueWithoutCourseInput {
  create: ProgressCreateWithoutCourseInput!
  update: ProgressUpdateWithoutCourseInput!
  where: ProgressWhereUniqueInput!
}

input ProgressUpsertWithWhereUniqueWithoutStudentInput {
  create: ProgressCreateWithoutStudentInput!
  update: ProgressUpdateWithoutStudentInput!
  where: ProgressWhereUniqueInput!
}

input ProgressWhereInput {
  AND: [ProgressWhereInput!]
  NOT: [ProgressWhereInput!]
  OR: [ProgressWhereInput!]
  course: CourseRelationFilter
  courseId: IntNullableFilter
  id: IntFilter
  lesson: IntFilter
  student: StudentRelationFilter
  studentId: IntNullableFilter
}

input ProgressWhereUniqueInput {
  id: Int
}

type Query {
  admin(where: AdminWhereUniqueInput!): Admin
  admins(cursor: AdminWhereUniqueInput, distinct: [AdminScalarFieldEnum!], orderBy: [AdminOrderByWithRelationInput!], skip: Int, take: Int, where: AdminWhereInput): [Admin!]!
  aggregateAdmin(cursor: AdminWhereUniqueInput, orderBy: [AdminOrderByWithRelationInput!], skip: Int, take: Int, where: AdminWhereInput): AggregateAdmin!
  aggregateAssignment(cursor: AssignmentWhereUniqueInput, orderBy: [AssignmentOrderByWithRelationInput!], skip: Int, take: Int, where: AssignmentWhereInput): AggregateAssignment!
  aggregateClassroom(cursor: ClassroomWhereUniqueInput, orderBy: [ClassroomOrderByWithRelationInput!], skip: Int, take: Int, where: ClassroomWhereInput): AggregateClassroom!
  aggregateCourse(cursor: CourseWhereUniqueInput, orderBy: [CourseOrderByWithRelationInput!], skip: Int, take: Int, where: CourseWhereInput): AggregateCourse!
  aggregateDepartment(cursor: DepartmentWhereUniqueInput, orderBy: [DepartmentOrderByWithRelationInput!], skip: Int, take: Int, where: DepartmentWhereInput): AggregateDepartment!
  aggregateLesson(cursor: LessonWhereUniqueInput, orderBy: [LessonOrderByWithRelationInput!], skip: Int, take: Int, where: LessonWhereInput): AggregateLesson!
  aggregateMeeting(cursor: MeetingWhereUniqueInput, orderBy: [MeetingOrderByWithRelationInput!], skip: Int, take: Int, where: MeetingWhereInput): AggregateMeeting!
  aggregateProgress(cursor: ProgressWhereUniqueInput, orderBy: [ProgressOrderByWithRelationInput!], skip: Int, take: Int, where: ProgressWhereInput): AggregateProgress!
  aggregateStudent(cursor: StudentWhereUniqueInput, orderBy: [StudentOrderByWithRelationInput!], skip: Int, take: Int, where: StudentWhereInput): AggregateStudent!
  aggregateSubmission(cursor: SubmissionWhereUniqueInput, orderBy: [SubmissionOrderByWithRelationInput!], skip: Int, take: Int, where: SubmissionWhereInput): AggregateSubmission!
  aggregateTeacher(cursor: TeacherWhereUniqueInput, orderBy: [TeacherOrderByWithRelationInput!], skip: Int, take: Int, where: TeacherWhereInput): AggregateTeacher!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  assignment(where: AssignmentWhereUniqueInput!): Assignment
  assignments(cursor: AssignmentWhereUniqueInput, distinct: [AssignmentScalarFieldEnum!], orderBy: [AssignmentOrderByWithRelationInput!], skip: Int, take: Int, where: AssignmentWhereInput): [Assignment!]!
  classroom(where: ClassroomWhereUniqueInput!): Classroom
  classrooms(cursor: ClassroomWhereUniqueInput, distinct: [ClassroomScalarFieldEnum!], orderBy: [ClassroomOrderByWithRelationInput!], skip: Int, take: Int, where: ClassroomWhereInput): [Classroom!]!
  course(where: CourseWhereUniqueInput!): Course
  courses(cursor: CourseWhereUniqueInput, distinct: [CourseScalarFieldEnum!], orderBy: [CourseOrderByWithRelationInput!], skip: Int, take: Int, where: CourseWhereInput): [Course!]!
  department(where: DepartmentWhereUniqueInput!): Department
  departments(cursor: DepartmentWhereUniqueInput, distinct: [DepartmentScalarFieldEnum!], orderBy: [DepartmentOrderByWithRelationInput!], skip: Int, take: Int, where: DepartmentWhereInput): [Department!]!
  findFirstAdmin(cursor: AdminWhereUniqueInput, distinct: [AdminScalarFieldEnum!], orderBy: [AdminOrderByWithRelationInput!], skip: Int, take: Int, where: AdminWhereInput): Admin
  findFirstAssignment(cursor: AssignmentWhereUniqueInput, distinct: [AssignmentScalarFieldEnum!], orderBy: [AssignmentOrderByWithRelationInput!], skip: Int, take: Int, where: AssignmentWhereInput): Assignment
  findFirstClassroom(cursor: ClassroomWhereUniqueInput, distinct: [ClassroomScalarFieldEnum!], orderBy: [ClassroomOrderByWithRelationInput!], skip: Int, take: Int, where: ClassroomWhereInput): Classroom
  findFirstCourse(cursor: CourseWhereUniqueInput, distinct: [CourseScalarFieldEnum!], orderBy: [CourseOrderByWithRelationInput!], skip: Int, take: Int, where: CourseWhereInput): Course
  findFirstDepartment(cursor: DepartmentWhereUniqueInput, distinct: [DepartmentScalarFieldEnum!], orderBy: [DepartmentOrderByWithRelationInput!], skip: Int, take: Int, where: DepartmentWhereInput): Department
  findFirstLesson(cursor: LessonWhereUniqueInput, distinct: [LessonScalarFieldEnum!], orderBy: [LessonOrderByWithRelationInput!], skip: Int, take: Int, where: LessonWhereInput): Lesson
  findFirstMeeting(cursor: MeetingWhereUniqueInput, distinct: [MeetingScalarFieldEnum!], orderBy: [MeetingOrderByWithRelationInput!], skip: Int, take: Int, where: MeetingWhereInput): Meeting
  findFirstProgress(cursor: ProgressWhereUniqueInput, distinct: [ProgressScalarFieldEnum!], orderBy: [ProgressOrderByWithRelationInput!], skip: Int, take: Int, where: ProgressWhereInput): Progress
  findFirstStudent(cursor: StudentWhereUniqueInput, distinct: [StudentScalarFieldEnum!], orderBy: [StudentOrderByWithRelationInput!], skip: Int, take: Int, where: StudentWhereInput): Student
  findFirstSubmission(cursor: SubmissionWhereUniqueInput, distinct: [SubmissionScalarFieldEnum!], orderBy: [SubmissionOrderByWithRelationInput!], skip: Int, take: Int, where: SubmissionWhereInput): Submission
  findFirstTeacher(cursor: TeacherWhereUniqueInput, distinct: [TeacherScalarFieldEnum!], orderBy: [TeacherOrderByWithRelationInput!], skip: Int, take: Int, where: TeacherWhereInput): Teacher
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByAdmin(by: [AdminScalarFieldEnum!]!, having: AdminScalarWhereWithAggregatesInput, orderBy: [AdminOrderByWithAggregationInput!], skip: Int, take: Int, where: AdminWhereInput): [AdminGroupBy!]!
  groupByAssignment(by: [AssignmentScalarFieldEnum!]!, having: AssignmentScalarWhereWithAggregatesInput, orderBy: [AssignmentOrderByWithAggregationInput!], skip: Int, take: Int, where: AssignmentWhereInput): [AssignmentGroupBy!]!
  groupByClassroom(by: [ClassroomScalarFieldEnum!]!, having: ClassroomScalarWhereWithAggregatesInput, orderBy: [ClassroomOrderByWithAggregationInput!], skip: Int, take: Int, where: ClassroomWhereInput): [ClassroomGroupBy!]!
  groupByCourse(by: [CourseScalarFieldEnum!]!, having: CourseScalarWhereWithAggregatesInput, orderBy: [CourseOrderByWithAggregationInput!], skip: Int, take: Int, where: CourseWhereInput): [CourseGroupBy!]!
  groupByDepartment(by: [DepartmentScalarFieldEnum!]!, having: DepartmentScalarWhereWithAggregatesInput, orderBy: [DepartmentOrderByWithAggregationInput!], skip: Int, take: Int, where: DepartmentWhereInput): [DepartmentGroupBy!]!
  groupByLesson(by: [LessonScalarFieldEnum!]!, having: LessonScalarWhereWithAggregatesInput, orderBy: [LessonOrderByWithAggregationInput!], skip: Int, take: Int, where: LessonWhereInput): [LessonGroupBy!]!
  groupByMeeting(by: [MeetingScalarFieldEnum!]!, having: MeetingScalarWhereWithAggregatesInput, orderBy: [MeetingOrderByWithAggregationInput!], skip: Int, take: Int, where: MeetingWhereInput): [MeetingGroupBy!]!
  groupByProgress(by: [ProgressScalarFieldEnum!]!, having: ProgressScalarWhereWithAggregatesInput, orderBy: [ProgressOrderByWithAggregationInput!], skip: Int, take: Int, where: ProgressWhereInput): [ProgressGroupBy!]!
  groupByStudent(by: [StudentScalarFieldEnum!]!, having: StudentScalarWhereWithAggregatesInput, orderBy: [StudentOrderByWithAggregationInput!], skip: Int, take: Int, where: StudentWhereInput): [StudentGroupBy!]!
  groupBySubmission(by: [SubmissionScalarFieldEnum!]!, having: SubmissionScalarWhereWithAggregatesInput, orderBy: [SubmissionOrderByWithAggregationInput!], skip: Int, take: Int, where: SubmissionWhereInput): [SubmissionGroupBy!]!
  groupByTeacher(by: [TeacherScalarFieldEnum!]!, having: TeacherScalarWhereWithAggregatesInput, orderBy: [TeacherOrderByWithAggregationInput!], skip: Int, take: Int, where: TeacherWhereInput): [TeacherGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessons(cursor: LessonWhereUniqueInput, distinct: [LessonScalarFieldEnum!], orderBy: [LessonOrderByWithRelationInput!], skip: Int, take: Int, where: LessonWhereInput): [Lesson!]!
  meeting(where: MeetingWhereUniqueInput!): Meeting
  meetings(cursor: MeetingWhereUniqueInput, distinct: [MeetingScalarFieldEnum!], orderBy: [MeetingOrderByWithRelationInput!], skip: Int, take: Int, where: MeetingWhereInput): [Meeting!]!
  progress(where: ProgressWhereUniqueInput!): Progress
  progresses(cursor: ProgressWhereUniqueInput, distinct: [ProgressScalarFieldEnum!], orderBy: [ProgressOrderByWithRelationInput!], skip: Int, take: Int, where: ProgressWhereInput): [Progress!]!
  student(where: StudentWhereUniqueInput!): Student
  students(cursor: StudentWhereUniqueInput, distinct: [StudentScalarFieldEnum!], orderBy: [StudentOrderByWithRelationInput!], skip: Int, take: Int, where: StudentWhereInput): [Student!]!
  submission(where: SubmissionWhereUniqueInput!): Submission
  submissions(cursor: SubmissionWhereUniqueInput, distinct: [SubmissionScalarFieldEnum!], orderBy: [SubmissionOrderByWithRelationInput!], skip: Int, take: Int, where: SubmissionWhereInput): [Submission!]!
  teacher(where: TeacherWhereUniqueInput!): Teacher
  teachers(cursor: TeacherWhereUniqueInput, distinct: [TeacherScalarFieldEnum!], orderBy: [TeacherOrderByWithRelationInput!], skip: Int, take: Int, where: TeacherWhereInput): [Teacher!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Student {
  _count: StudentCount
  admin: Admin
  adminId: Int
  classroom: Classroom
  classroomId: Int
  grade: Int!
  id: Int!
  progresses(cursor: ProgressWhereUniqueInput, distinct: [ProgressScalarFieldEnum!], orderBy: [ProgressOrderByWithRelationInput!], skip: Int, take: Int, where: ProgressWhereInput): [Progress!]!
  submissions(cursor: SubmissionWhereUniqueInput, distinct: [SubmissionScalarFieldEnum!], orderBy: [SubmissionOrderByWithRelationInput!], skip: Int, take: Int, where: SubmissionWhereInput): [Submission!]!
  user: User!
  userId: Int!
}

type StudentAvgAggregate {
  adminId: Float
  classroomId: Float
  grade: Float
  id: Float
  userId: Float
}

input StudentAvgOrderByAggregateInput {
  adminId: SortOrder
  classroomId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

type StudentCount {
  progresses: Int!
  submissions: Int!
}

type StudentCountAggregate {
  _all: Int!
  adminId: Int!
  classroomId: Int!
  grade: Int!
  id: Int!
  userId: Int!
}

input StudentCountOrderByAggregateInput {
  adminId: SortOrder
  classroomId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

input StudentCreateInput {
  admin: AdminCreateNestedOneWithoutStudentsInput
  classroom: ClassroomCreateNestedOneWithoutStudentsInput
  grade: Int!
  progresses: ProgressCreateNestedManyWithoutStudentInput
  submissions: SubmissionCreateNestedManyWithoutStudentInput
  user: UserCreateNestedOneWithoutStudentsInput!
}

input StudentCreateNestedManyWithoutAdminInput {
  connect: [StudentWhereUniqueInput!]
  connectOrCreate: [StudentCreateOrConnectWithoutAdminInput!]
  create: [StudentCreateWithoutAdminInput!]
}

input StudentCreateNestedManyWithoutClassroomInput {
  connect: [StudentWhereUniqueInput!]
  connectOrCreate: [StudentCreateOrConnectWithoutClassroomInput!]
  create: [StudentCreateWithoutClassroomInput!]
}

input StudentCreateNestedOneWithoutProgressesInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutProgressesInput
  create: StudentCreateWithoutProgressesInput
}

input StudentCreateNestedOneWithoutSubmissionsInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutSubmissionsInput
  create: StudentCreateWithoutSubmissionsInput
}

input StudentCreateNestedOneWithoutUserInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutUserInput
  create: StudentCreateWithoutUserInput
}

input StudentCreateOrConnectWithoutAdminInput {
  create: StudentCreateWithoutAdminInput!
  where: StudentWhereUniqueInput!
}

input StudentCreateOrConnectWithoutClassroomInput {
  create: StudentCreateWithoutClassroomInput!
  where: StudentWhereUniqueInput!
}

input StudentCreateOrConnectWithoutProgressesInput {
  create: StudentCreateWithoutProgressesInput!
  where: StudentWhereUniqueInput!
}

input StudentCreateOrConnectWithoutSubmissionsInput {
  create: StudentCreateWithoutSubmissionsInput!
  where: StudentWhereUniqueInput!
}

input StudentCreateOrConnectWithoutUserInput {
  create: StudentCreateWithoutUserInput!
  where: StudentWhereUniqueInput!
}

input StudentCreateWithoutAdminInput {
  classroom: ClassroomCreateNestedOneWithoutStudentsInput
  grade: Int!
  progresses: ProgressCreateNestedManyWithoutStudentInput
  submissions: SubmissionCreateNestedManyWithoutStudentInput
  user: UserCreateNestedOneWithoutStudentsInput!
}

input StudentCreateWithoutClassroomInput {
  admin: AdminCreateNestedOneWithoutStudentsInput
  grade: Int!
  progresses: ProgressCreateNestedManyWithoutStudentInput
  submissions: SubmissionCreateNestedManyWithoutStudentInput
  user: UserCreateNestedOneWithoutStudentsInput!
}

input StudentCreateWithoutProgressesInput {
  admin: AdminCreateNestedOneWithoutStudentsInput
  classroom: ClassroomCreateNestedOneWithoutStudentsInput
  grade: Int!
  submissions: SubmissionCreateNestedManyWithoutStudentInput
  user: UserCreateNestedOneWithoutStudentsInput!
}

input StudentCreateWithoutSubmissionsInput {
  admin: AdminCreateNestedOneWithoutStudentsInput
  classroom: ClassroomCreateNestedOneWithoutStudentsInput
  grade: Int!
  progresses: ProgressCreateNestedManyWithoutStudentInput
  user: UserCreateNestedOneWithoutStudentsInput!
}

input StudentCreateWithoutUserInput {
  admin: AdminCreateNestedOneWithoutStudentsInput
  classroom: ClassroomCreateNestedOneWithoutStudentsInput
  grade: Int!
  progresses: ProgressCreateNestedManyWithoutStudentInput
  submissions: SubmissionCreateNestedManyWithoutStudentInput
}

type StudentGroupBy {
  _avg: StudentAvgAggregate
  _count: StudentCountAggregate
  _max: StudentMaxAggregate
  _min: StudentMinAggregate
  _sum: StudentSumAggregate
  adminId: Int
  classroomId: Int
  grade: Int!
  id: Int!
  userId: Int!
}

input StudentListRelationFilter {
  every: StudentWhereInput
  none: StudentWhereInput
  some: StudentWhereInput
}

type StudentMaxAggregate {
  adminId: Int
  classroomId: Int
  grade: Int
  id: Int
  userId: Int
}

input StudentMaxOrderByAggregateInput {
  adminId: SortOrder
  classroomId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

type StudentMinAggregate {
  adminId: Int
  classroomId: Int
  grade: Int
  id: Int
  userId: Int
}

input StudentMinOrderByAggregateInput {
  adminId: SortOrder
  classroomId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

input StudentOrderByRelationAggregateInput {
  _count: SortOrder
}

input StudentOrderByWithAggregationInput {
  _avg: StudentAvgOrderByAggregateInput
  _count: StudentCountOrderByAggregateInput
  _max: StudentMaxOrderByAggregateInput
  _min: StudentMinOrderByAggregateInput
  _sum: StudentSumOrderByAggregateInput
  adminId: SortOrder
  classroomId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

input StudentOrderByWithRelationInput {
  admin: AdminOrderByWithRelationInput
  adminId: SortOrder
  classroom: ClassroomOrderByWithRelationInput
  classroomId: SortOrder
  grade: SortOrder
  id: SortOrder
  progresses: ProgressOrderByRelationAggregateInput
  submissions: SubmissionOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input StudentRelationFilter {
  is: StudentWhereInput
  isNot: StudentWhereInput
}

enum StudentScalarFieldEnum {
  adminId
  classroomId
  grade
  id
  userId
}

input StudentScalarWhereInput {
  AND: [StudentScalarWhereInput!]
  NOT: [StudentScalarWhereInput!]
  OR: [StudentScalarWhereInput!]
  adminId: IntNullableFilter
  classroomId: IntNullableFilter
  grade: IntFilter
  id: IntFilter
  userId: IntFilter
}

input StudentScalarWhereWithAggregatesInput {
  AND: [StudentScalarWhereWithAggregatesInput!]
  NOT: [StudentScalarWhereWithAggregatesInput!]
  OR: [StudentScalarWhereWithAggregatesInput!]
  adminId: IntNullableWithAggregatesFilter
  classroomId: IntNullableWithAggregatesFilter
  grade: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type StudentSumAggregate {
  adminId: Int
  classroomId: Int
  grade: Int
  id: Int
  userId: Int
}

input StudentSumOrderByAggregateInput {
  adminId: SortOrder
  classroomId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

input StudentUpdateInput {
  admin: AdminUpdateOneWithoutStudentsInput
  classroom: ClassroomUpdateOneWithoutStudentsInput
  grade: IntFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutStudentInput
  submissions: SubmissionUpdateManyWithoutStudentInput
  user: UserUpdateOneRequiredWithoutStudentsInput
}

input StudentUpdateManyMutationInput {
  grade: IntFieldUpdateOperationsInput
}

input StudentUpdateManyWithWhereWithoutAdminInput {
  data: StudentUpdateManyMutationInput!
  where: StudentScalarWhereInput!
}

input StudentUpdateManyWithWhereWithoutClassroomInput {
  data: StudentUpdateManyMutationInput!
  where: StudentScalarWhereInput!
}

input StudentUpdateManyWithoutAdminInput {
  connect: [StudentWhereUniqueInput!]
  connectOrCreate: [StudentCreateOrConnectWithoutAdminInput!]
  create: [StudentCreateWithoutAdminInput!]
  delete: [StudentWhereUniqueInput!]
  deleteMany: [StudentScalarWhereInput!]
  disconnect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [StudentUpdateManyWithWhereWithoutAdminInput!]
  upsert: [StudentUpsertWithWhereUniqueWithoutAdminInput!]
}

input StudentUpdateManyWithoutClassroomInput {
  connect: [StudentWhereUniqueInput!]
  connectOrCreate: [StudentCreateOrConnectWithoutClassroomInput!]
  create: [StudentCreateWithoutClassroomInput!]
  delete: [StudentWhereUniqueInput!]
  deleteMany: [StudentScalarWhereInput!]
  disconnect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueWithoutClassroomInput!]
  updateMany: [StudentUpdateManyWithWhereWithoutClassroomInput!]
  upsert: [StudentUpsertWithWhereUniqueWithoutClassroomInput!]
}

input StudentUpdateOneWithoutProgressesInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutProgressesInput
  create: StudentCreateWithoutProgressesInput
  delete: Boolean
  disconnect: Boolean
  update: StudentUpdateWithoutProgressesInput
  upsert: StudentUpsertWithoutProgressesInput
}

input StudentUpdateOneWithoutSubmissionsInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutSubmissionsInput
  create: StudentCreateWithoutSubmissionsInput
  delete: Boolean
  disconnect: Boolean
  update: StudentUpdateWithoutSubmissionsInput
  upsert: StudentUpsertWithoutSubmissionsInput
}

input StudentUpdateOneWithoutUserInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutUserInput
  create: StudentCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: StudentUpdateWithoutUserInput
  upsert: StudentUpsertWithoutUserInput
}

input StudentUpdateWithWhereUniqueWithoutAdminInput {
  data: StudentUpdateWithoutAdminInput!
  where: StudentWhereUniqueInput!
}

input StudentUpdateWithWhereUniqueWithoutClassroomInput {
  data: StudentUpdateWithoutClassroomInput!
  where: StudentWhereUniqueInput!
}

input StudentUpdateWithoutAdminInput {
  classroom: ClassroomUpdateOneWithoutStudentsInput
  grade: IntFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutStudentInput
  submissions: SubmissionUpdateManyWithoutStudentInput
  user: UserUpdateOneRequiredWithoutStudentsInput
}

input StudentUpdateWithoutClassroomInput {
  admin: AdminUpdateOneWithoutStudentsInput
  grade: IntFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutStudentInput
  submissions: SubmissionUpdateManyWithoutStudentInput
  user: UserUpdateOneRequiredWithoutStudentsInput
}

input StudentUpdateWithoutProgressesInput {
  admin: AdminUpdateOneWithoutStudentsInput
  classroom: ClassroomUpdateOneWithoutStudentsInput
  grade: IntFieldUpdateOperationsInput
  submissions: SubmissionUpdateManyWithoutStudentInput
  user: UserUpdateOneRequiredWithoutStudentsInput
}

input StudentUpdateWithoutSubmissionsInput {
  admin: AdminUpdateOneWithoutStudentsInput
  classroom: ClassroomUpdateOneWithoutStudentsInput
  grade: IntFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutStudentInput
  user: UserUpdateOneRequiredWithoutStudentsInput
}

input StudentUpdateWithoutUserInput {
  admin: AdminUpdateOneWithoutStudentsInput
  classroom: ClassroomUpdateOneWithoutStudentsInput
  grade: IntFieldUpdateOperationsInput
  progresses: ProgressUpdateManyWithoutStudentInput
  submissions: SubmissionUpdateManyWithoutStudentInput
}

input StudentUpsertWithWhereUniqueWithoutAdminInput {
  create: StudentCreateWithoutAdminInput!
  update: StudentUpdateWithoutAdminInput!
  where: StudentWhereUniqueInput!
}

input StudentUpsertWithWhereUniqueWithoutClassroomInput {
  create: StudentCreateWithoutClassroomInput!
  update: StudentUpdateWithoutClassroomInput!
  where: StudentWhereUniqueInput!
}

input StudentUpsertWithoutProgressesInput {
  create: StudentCreateWithoutProgressesInput!
  update: StudentUpdateWithoutProgressesInput!
}

input StudentUpsertWithoutSubmissionsInput {
  create: StudentCreateWithoutSubmissionsInput!
  update: StudentUpdateWithoutSubmissionsInput!
}

input StudentUpsertWithoutUserInput {
  create: StudentCreateWithoutUserInput!
  update: StudentUpdateWithoutUserInput!
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  admin: AdminRelationFilter
  adminId: IntNullableFilter
  classroom: ClassroomRelationFilter
  classroomId: IntNullableFilter
  grade: IntFilter
  id: IntFilter
  progresses: ProgressListRelationFilter
  submissions: SubmissionListRelationFilter
  user: UserRelationFilter
  userId: IntFilter
}

input StudentWhereUniqueInput {
  id: Int
  userId: Int
}

type Submission {
  assignment: Assignment
  assignmentId: Int
  content: String!
  id: Int!
  student: Student
  studentId: Int
  submittedAt: DateTime!
}

type SubmissionAvgAggregate {
  assignmentId: Float
  id: Float
  studentId: Float
}

input SubmissionAvgOrderByAggregateInput {
  assignmentId: SortOrder
  id: SortOrder
  studentId: SortOrder
}

type SubmissionCountAggregate {
  _all: Int!
  assignmentId: Int!
  content: Int!
  id: Int!
  studentId: Int!
  submittedAt: Int!
}

input SubmissionCountOrderByAggregateInput {
  assignmentId: SortOrder
  content: SortOrder
  id: SortOrder
  studentId: SortOrder
  submittedAt: SortOrder
}

input SubmissionCreateInput {
  assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
  content: String!
  student: StudentCreateNestedOneWithoutSubmissionsInput
  submittedAt: DateTime!
}

input SubmissionCreateNestedManyWithoutAssignmentInput {
  connect: [SubmissionWhereUniqueInput!]
  connectOrCreate: [SubmissionCreateOrConnectWithoutAssignmentInput!]
  create: [SubmissionCreateWithoutAssignmentInput!]
}

input SubmissionCreateNestedManyWithoutStudentInput {
  connect: [SubmissionWhereUniqueInput!]
  connectOrCreate: [SubmissionCreateOrConnectWithoutStudentInput!]
  create: [SubmissionCreateWithoutStudentInput!]
}

input SubmissionCreateOrConnectWithoutAssignmentInput {
  create: SubmissionCreateWithoutAssignmentInput!
  where: SubmissionWhereUniqueInput!
}

input SubmissionCreateOrConnectWithoutStudentInput {
  create: SubmissionCreateWithoutStudentInput!
  where: SubmissionWhereUniqueInput!
}

input SubmissionCreateWithoutAssignmentInput {
  content: String!
  student: StudentCreateNestedOneWithoutSubmissionsInput
  submittedAt: DateTime!
}

input SubmissionCreateWithoutStudentInput {
  assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
  content: String!
  submittedAt: DateTime!
}

type SubmissionGroupBy {
  _avg: SubmissionAvgAggregate
  _count: SubmissionCountAggregate
  _max: SubmissionMaxAggregate
  _min: SubmissionMinAggregate
  _sum: SubmissionSumAggregate
  assignmentId: Int
  content: String!
  id: Int!
  studentId: Int
  submittedAt: DateTime!
}

input SubmissionListRelationFilter {
  every: SubmissionWhereInput
  none: SubmissionWhereInput
  some: SubmissionWhereInput
}

type SubmissionMaxAggregate {
  assignmentId: Int
  content: String
  id: Int
  studentId: Int
  submittedAt: DateTime
}

input SubmissionMaxOrderByAggregateInput {
  assignmentId: SortOrder
  content: SortOrder
  id: SortOrder
  studentId: SortOrder
  submittedAt: SortOrder
}

type SubmissionMinAggregate {
  assignmentId: Int
  content: String
  id: Int
  studentId: Int
  submittedAt: DateTime
}

input SubmissionMinOrderByAggregateInput {
  assignmentId: SortOrder
  content: SortOrder
  id: SortOrder
  studentId: SortOrder
  submittedAt: SortOrder
}

input SubmissionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubmissionOrderByWithAggregationInput {
  _avg: SubmissionAvgOrderByAggregateInput
  _count: SubmissionCountOrderByAggregateInput
  _max: SubmissionMaxOrderByAggregateInput
  _min: SubmissionMinOrderByAggregateInput
  _sum: SubmissionSumOrderByAggregateInput
  assignmentId: SortOrder
  content: SortOrder
  id: SortOrder
  studentId: SortOrder
  submittedAt: SortOrder
}

input SubmissionOrderByWithRelationInput {
  assignment: AssignmentOrderByWithRelationInput
  assignmentId: SortOrder
  content: SortOrder
  id: SortOrder
  student: StudentOrderByWithRelationInput
  studentId: SortOrder
  submittedAt: SortOrder
}

enum SubmissionScalarFieldEnum {
  assignmentId
  content
  id
  studentId
  submittedAt
}

input SubmissionScalarWhereInput {
  AND: [SubmissionScalarWhereInput!]
  NOT: [SubmissionScalarWhereInput!]
  OR: [SubmissionScalarWhereInput!]
  assignmentId: IntNullableFilter
  content: StringFilter
  id: IntFilter
  studentId: IntNullableFilter
  submittedAt: DateTimeFilter
}

input SubmissionScalarWhereWithAggregatesInput {
  AND: [SubmissionScalarWhereWithAggregatesInput!]
  NOT: [SubmissionScalarWhereWithAggregatesInput!]
  OR: [SubmissionScalarWhereWithAggregatesInput!]
  assignmentId: IntNullableWithAggregatesFilter
  content: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  studentId: IntNullableWithAggregatesFilter
  submittedAt: DateTimeWithAggregatesFilter
}

type SubmissionSumAggregate {
  assignmentId: Int
  id: Int
  studentId: Int
}

input SubmissionSumOrderByAggregateInput {
  assignmentId: SortOrder
  id: SortOrder
  studentId: SortOrder
}

input SubmissionUpdateInput {
  assignment: AssignmentUpdateOneWithoutSubmissionsInput
  content: StringFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutSubmissionsInput
  submittedAt: DateTimeFieldUpdateOperationsInput
}

input SubmissionUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  submittedAt: DateTimeFieldUpdateOperationsInput
}

input SubmissionUpdateManyWithWhereWithoutAssignmentInput {
  data: SubmissionUpdateManyMutationInput!
  where: SubmissionScalarWhereInput!
}

input SubmissionUpdateManyWithWhereWithoutStudentInput {
  data: SubmissionUpdateManyMutationInput!
  where: SubmissionScalarWhereInput!
}

input SubmissionUpdateManyWithoutAssignmentInput {
  connect: [SubmissionWhereUniqueInput!]
  connectOrCreate: [SubmissionCreateOrConnectWithoutAssignmentInput!]
  create: [SubmissionCreateWithoutAssignmentInput!]
  delete: [SubmissionWhereUniqueInput!]
  deleteMany: [SubmissionScalarWhereInput!]
  disconnect: [SubmissionWhereUniqueInput!]
  set: [SubmissionWhereUniqueInput!]
  update: [SubmissionUpdateWithWhereUniqueWithoutAssignmentInput!]
  updateMany: [SubmissionUpdateManyWithWhereWithoutAssignmentInput!]
  upsert: [SubmissionUpsertWithWhereUniqueWithoutAssignmentInput!]
}

input SubmissionUpdateManyWithoutStudentInput {
  connect: [SubmissionWhereUniqueInput!]
  connectOrCreate: [SubmissionCreateOrConnectWithoutStudentInput!]
  create: [SubmissionCreateWithoutStudentInput!]
  delete: [SubmissionWhereUniqueInput!]
  deleteMany: [SubmissionScalarWhereInput!]
  disconnect: [SubmissionWhereUniqueInput!]
  set: [SubmissionWhereUniqueInput!]
  update: [SubmissionUpdateWithWhereUniqueWithoutStudentInput!]
  updateMany: [SubmissionUpdateManyWithWhereWithoutStudentInput!]
  upsert: [SubmissionUpsertWithWhereUniqueWithoutStudentInput!]
}

input SubmissionUpdateWithWhereUniqueWithoutAssignmentInput {
  data: SubmissionUpdateWithoutAssignmentInput!
  where: SubmissionWhereUniqueInput!
}

input SubmissionUpdateWithWhereUniqueWithoutStudentInput {
  data: SubmissionUpdateWithoutStudentInput!
  where: SubmissionWhereUniqueInput!
}

input SubmissionUpdateWithoutAssignmentInput {
  content: StringFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutSubmissionsInput
  submittedAt: DateTimeFieldUpdateOperationsInput
}

input SubmissionUpdateWithoutStudentInput {
  assignment: AssignmentUpdateOneWithoutSubmissionsInput
  content: StringFieldUpdateOperationsInput
  submittedAt: DateTimeFieldUpdateOperationsInput
}

input SubmissionUpsertWithWhereUniqueWithoutAssignmentInput {
  create: SubmissionCreateWithoutAssignmentInput!
  update: SubmissionUpdateWithoutAssignmentInput!
  where: SubmissionWhereUniqueInput!
}

input SubmissionUpsertWithWhereUniqueWithoutStudentInput {
  create: SubmissionCreateWithoutStudentInput!
  update: SubmissionUpdateWithoutStudentInput!
  where: SubmissionWhereUniqueInput!
}

input SubmissionWhereInput {
  AND: [SubmissionWhereInput!]
  NOT: [SubmissionWhereInput!]
  OR: [SubmissionWhereInput!]
  assignment: AssignmentRelationFilter
  assignmentId: IntNullableFilter
  content: StringFilter
  id: IntFilter
  student: StudentRelationFilter
  studentId: IntNullableFilter
  submittedAt: DateTimeFilter
}

input SubmissionWhereUniqueInput {
  id: Int
}

type Teacher {
  _count: TeacherCount
  admin: Admin
  adminId: Int
  courses(cursor: CourseWhereUniqueInput, distinct: [CourseScalarFieldEnum!], orderBy: [CourseOrderByWithRelationInput!], skip: Int, take: Int, where: CourseWhereInput): [Course!]!
  grade: String!
  id: Int!
  user: User!
  userId: Int!
}

type TeacherAvgAggregate {
  adminId: Float
  id: Float
  userId: Float
}

input TeacherAvgOrderByAggregateInput {
  adminId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type TeacherCount {
  courses: Int!
}

type TeacherCountAggregate {
  _all: Int!
  adminId: Int!
  grade: Int!
  id: Int!
  userId: Int!
}

input TeacherCountOrderByAggregateInput {
  adminId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

input TeacherCreateInput {
  admin: AdminCreateNestedOneWithoutTeachersInput
  courses: CourseCreateNestedManyWithoutTeacherInput
  grade: String!
  user: UserCreateNestedOneWithoutTeachersInput!
}

input TeacherCreateNestedManyWithoutAdminInput {
  connect: [TeacherWhereUniqueInput!]
  connectOrCreate: [TeacherCreateOrConnectWithoutAdminInput!]
  create: [TeacherCreateWithoutAdminInput!]
}

input TeacherCreateNestedOneWithoutCoursesInput {
  connect: TeacherWhereUniqueInput
  connectOrCreate: TeacherCreateOrConnectWithoutCoursesInput
  create: TeacherCreateWithoutCoursesInput
}

input TeacherCreateNestedOneWithoutUserInput {
  connect: TeacherWhereUniqueInput
  connectOrCreate: TeacherCreateOrConnectWithoutUserInput
  create: TeacherCreateWithoutUserInput
}

input TeacherCreateOrConnectWithoutAdminInput {
  create: TeacherCreateWithoutAdminInput!
  where: TeacherWhereUniqueInput!
}

input TeacherCreateOrConnectWithoutCoursesInput {
  create: TeacherCreateWithoutCoursesInput!
  where: TeacherWhereUniqueInput!
}

input TeacherCreateOrConnectWithoutUserInput {
  create: TeacherCreateWithoutUserInput!
  where: TeacherWhereUniqueInput!
}

input TeacherCreateWithoutAdminInput {
  courses: CourseCreateNestedManyWithoutTeacherInput
  grade: String!
  user: UserCreateNestedOneWithoutTeachersInput!
}

input TeacherCreateWithoutCoursesInput {
  admin: AdminCreateNestedOneWithoutTeachersInput
  grade: String!
  user: UserCreateNestedOneWithoutTeachersInput!
}

input TeacherCreateWithoutUserInput {
  admin: AdminCreateNestedOneWithoutTeachersInput
  courses: CourseCreateNestedManyWithoutTeacherInput
  grade: String!
}

type TeacherGroupBy {
  _avg: TeacherAvgAggregate
  _count: TeacherCountAggregate
  _max: TeacherMaxAggregate
  _min: TeacherMinAggregate
  _sum: TeacherSumAggregate
  adminId: Int
  grade: String!
  id: Int!
  userId: Int!
}

input TeacherListRelationFilter {
  every: TeacherWhereInput
  none: TeacherWhereInput
  some: TeacherWhereInput
}

type TeacherMaxAggregate {
  adminId: Int
  grade: String
  id: Int
  userId: Int
}

input TeacherMaxOrderByAggregateInput {
  adminId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

type TeacherMinAggregate {
  adminId: Int
  grade: String
  id: Int
  userId: Int
}

input TeacherMinOrderByAggregateInput {
  adminId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

input TeacherOrderByRelationAggregateInput {
  _count: SortOrder
}

input TeacherOrderByWithAggregationInput {
  _avg: TeacherAvgOrderByAggregateInput
  _count: TeacherCountOrderByAggregateInput
  _max: TeacherMaxOrderByAggregateInput
  _min: TeacherMinOrderByAggregateInput
  _sum: TeacherSumOrderByAggregateInput
  adminId: SortOrder
  grade: SortOrder
  id: SortOrder
  userId: SortOrder
}

input TeacherOrderByWithRelationInput {
  admin: AdminOrderByWithRelationInput
  adminId: SortOrder
  courses: CourseOrderByRelationAggregateInput
  grade: SortOrder
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input TeacherRelationFilter {
  is: TeacherWhereInput
  isNot: TeacherWhereInput
}

enum TeacherScalarFieldEnum {
  adminId
  grade
  id
  userId
}

input TeacherScalarWhereInput {
  AND: [TeacherScalarWhereInput!]
  NOT: [TeacherScalarWhereInput!]
  OR: [TeacherScalarWhereInput!]
  adminId: IntNullableFilter
  grade: StringFilter
  id: IntFilter
  userId: IntFilter
}

input TeacherScalarWhereWithAggregatesInput {
  AND: [TeacherScalarWhereWithAggregatesInput!]
  NOT: [TeacherScalarWhereWithAggregatesInput!]
  OR: [TeacherScalarWhereWithAggregatesInput!]
  adminId: IntNullableWithAggregatesFilter
  grade: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type TeacherSumAggregate {
  adminId: Int
  id: Int
  userId: Int
}

input TeacherSumOrderByAggregateInput {
  adminId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input TeacherUpdateInput {
  admin: AdminUpdateOneWithoutTeachersInput
  courses: CourseUpdateManyWithoutTeacherInput
  grade: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTeachersInput
}

input TeacherUpdateManyMutationInput {
  grade: StringFieldUpdateOperationsInput
}

input TeacherUpdateManyWithWhereWithoutAdminInput {
  data: TeacherUpdateManyMutationInput!
  where: TeacherScalarWhereInput!
}

input TeacherUpdateManyWithoutAdminInput {
  connect: [TeacherWhereUniqueInput!]
  connectOrCreate: [TeacherCreateOrConnectWithoutAdminInput!]
  create: [TeacherCreateWithoutAdminInput!]
  delete: [TeacherWhereUniqueInput!]
  deleteMany: [TeacherScalarWhereInput!]
  disconnect: [TeacherWhereUniqueInput!]
  set: [TeacherWhereUniqueInput!]
  update: [TeacherUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [TeacherUpdateManyWithWhereWithoutAdminInput!]
  upsert: [TeacherUpsertWithWhereUniqueWithoutAdminInput!]
}

input TeacherUpdateOneWithoutCoursesInput {
  connect: TeacherWhereUniqueInput
  connectOrCreate: TeacherCreateOrConnectWithoutCoursesInput
  create: TeacherCreateWithoutCoursesInput
  delete: Boolean
  disconnect: Boolean
  update: TeacherUpdateWithoutCoursesInput
  upsert: TeacherUpsertWithoutCoursesInput
}

input TeacherUpdateOneWithoutUserInput {
  connect: TeacherWhereUniqueInput
  connectOrCreate: TeacherCreateOrConnectWithoutUserInput
  create: TeacherCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: TeacherUpdateWithoutUserInput
  upsert: TeacherUpsertWithoutUserInput
}

input TeacherUpdateWithWhereUniqueWithoutAdminInput {
  data: TeacherUpdateWithoutAdminInput!
  where: TeacherWhereUniqueInput!
}

input TeacherUpdateWithoutAdminInput {
  courses: CourseUpdateManyWithoutTeacherInput
  grade: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTeachersInput
}

input TeacherUpdateWithoutCoursesInput {
  admin: AdminUpdateOneWithoutTeachersInput
  grade: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTeachersInput
}

input TeacherUpdateWithoutUserInput {
  admin: AdminUpdateOneWithoutTeachersInput
  courses: CourseUpdateManyWithoutTeacherInput
  grade: StringFieldUpdateOperationsInput
}

input TeacherUpsertWithWhereUniqueWithoutAdminInput {
  create: TeacherCreateWithoutAdminInput!
  update: TeacherUpdateWithoutAdminInput!
  where: TeacherWhereUniqueInput!
}

input TeacherUpsertWithoutCoursesInput {
  create: TeacherCreateWithoutCoursesInput!
  update: TeacherUpdateWithoutCoursesInput!
}

input TeacherUpsertWithoutUserInput {
  create: TeacherCreateWithoutUserInput!
  update: TeacherUpdateWithoutUserInput!
}

input TeacherWhereInput {
  AND: [TeacherWhereInput!]
  NOT: [TeacherWhereInput!]
  OR: [TeacherWhereInput!]
  admin: AdminRelationFilter
  adminId: IntNullableFilter
  courses: CourseListRelationFilter
  grade: StringFilter
  id: IntFilter
  user: UserRelationFilter
  userId: IntFilter
}

input TeacherWhereUniqueInput {
  id: Int
  userId: Int
}

type User {
  admins: Admin
  createdAt: DateTime!
  firstName: String!
  id: Int!
  lastName: String!
  password: String!
  picture: String!
  role: String!
  students: Student
  teachers: Teacher
  updatedAt: DateTime!
  username: String!
}

type UserAvgAggregate {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  password: Int!
  picture: Int!
  role: Int!
  updatedAt: Int!
  username: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  picture: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserCreateInput {
  admins: AdminCreateNestedOneWithoutUserInput
  createdAt: DateTime
  firstName: String!
  lastName: String!
  password: String!
  picture: String!
  role: String!
  students: StudentCreateNestedOneWithoutUserInput
  teachers: TeacherCreateNestedOneWithoutUserInput
  updatedAt: DateTime
  username: String!
}

input UserCreateNestedOneWithoutAdminsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAdminsInput
  create: UserCreateWithoutAdminsInput
}

input UserCreateNestedOneWithoutStudentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStudentsInput
  create: UserCreateWithoutStudentsInput
}

input UserCreateNestedOneWithoutTeachersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTeachersInput
  create: UserCreateWithoutTeachersInput
}

input UserCreateOrConnectWithoutAdminsInput {
  create: UserCreateWithoutAdminsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStudentsInput {
  create: UserCreateWithoutStudentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTeachersInput {
  create: UserCreateWithoutTeachersInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAdminsInput {
  createdAt: DateTime
  firstName: String!
  lastName: String!
  password: String!
  picture: String!
  role: String!
  students: StudentCreateNestedOneWithoutUserInput
  teachers: TeacherCreateNestedOneWithoutUserInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutStudentsInput {
  admins: AdminCreateNestedOneWithoutUserInput
  createdAt: DateTime
  firstName: String!
  lastName: String!
  password: String!
  picture: String!
  role: String!
  teachers: TeacherCreateNestedOneWithoutUserInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutTeachersInput {
  admins: AdminCreateNestedOneWithoutUserInput
  createdAt: DateTime
  firstName: String!
  lastName: String!
  password: String!
  picture: String!
  role: String!
  students: StudentCreateNestedOneWithoutUserInput
  updatedAt: DateTime
  username: String!
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  createdAt: DateTime!
  firstName: String!
  id: Int!
  lastName: String!
  password: String!
  picture: String!
  role: String!
  updatedAt: DateTime!
  username: String!
}

type UserMaxAggregate {
  createdAt: DateTime
  firstName: String
  id: Int
  lastName: String
  password: String
  picture: String
  role: String
  updatedAt: DateTime
  username: String
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  picture: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  firstName: String
  id: Int
  lastName: String
  password: String
  picture: String
  role: String
  updatedAt: DateTime
  username: String
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  picture: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  picture: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserOrderByWithRelationInput {
  admins: AdminOrderByWithRelationInput
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  picture: SortOrder
  role: SortOrder
  students: StudentOrderByWithRelationInput
  teachers: TeacherOrderByWithRelationInput
  updatedAt: SortOrder
  username: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  firstName
  id
  lastName
  password
  picture
  role
  updatedAt
  username
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  picture: StringWithAggregatesFilter
  role: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  username: StringWithAggregatesFilter
}

type UserSumAggregate {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUpdateInput {
  admins: AdminUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  students: StudentUpdateOneWithoutUserInput
  teachers: TeacherUpdateOneWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAdminsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAdminsInput
  create: UserCreateWithoutAdminsInput
  update: UserUpdateWithoutAdminsInput
  upsert: UserUpsertWithoutAdminsInput
}

input UserUpdateOneRequiredWithoutStudentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStudentsInput
  create: UserCreateWithoutStudentsInput
  update: UserUpdateWithoutStudentsInput
  upsert: UserUpsertWithoutStudentsInput
}

input UserUpdateOneRequiredWithoutTeachersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTeachersInput
  create: UserCreateWithoutTeachersInput
  update: UserUpdateWithoutTeachersInput
  upsert: UserUpsertWithoutTeachersInput
}

input UserUpdateWithoutAdminsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  students: StudentUpdateOneWithoutUserInput
  teachers: TeacherUpdateOneWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutStudentsInput {
  admins: AdminUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  teachers: TeacherUpdateOneWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutTeachersInput {
  admins: AdminUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  students: StudentUpdateOneWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutAdminsInput {
  create: UserCreateWithoutAdminsInput!
  update: UserUpdateWithoutAdminsInput!
}

input UserUpsertWithoutStudentsInput {
  create: UserCreateWithoutStudentsInput!
  update: UserUpdateWithoutStudentsInput!
}

input UserUpsertWithoutTeachersInput {
  create: UserCreateWithoutTeachersInput!
  update: UserUpdateWithoutTeachersInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  admins: AdminRelationFilter
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: IntFilter
  lastName: StringFilter
  password: StringFilter
  picture: StringFilter
  role: StringFilter
  students: StudentRelationFilter
  teachers: TeacherRelationFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: Int
}
